/********************************************************************************
ファイル名	：	JOB2.scp
バージョン	：	Ver.1.00
作成日付	：	2006/01/12
動作説明	：	BT-500アプリケーション

注意		：	本プログラムを修正した場合
				弊社サポートの対象外となります
********************************************************************************/



Include "Lib\Utility"
Include "Lib\JobUtility"
Include "Lib\prtUtility"

//---------------------------------------------------
// メインメソッド
Method main()
	
Begin
	// --初期設定--
	// ログファイル設定

	LogRecord:name = "3:logdatht.txt"
	LogRecord:separator = "\t"
	LogRecord:fieldNum = 2
	
	// ステータス表示設定
	Screen:status = true
	
	// Lキー，Rキー割付け 
	Handy:leftKey = "L"
	Handy:rightKey = "TRG"
	
	//フォント設定
	With Screen
		:fontSize = 12 :fontGapx = 0 :fontGapy = 1 
	EndWith
	
	// --処理開始--
	JOB:job_main()
	
// スクリプトカスタマイズをする場合は下記の2行をコメントアウトするとデバッグ効率が良くなります
Catch
	Handy:ShowMessageBox("アプリケーションに問題が発生しました("&System:error&")", "ok" )
End Method


/////////////////////////////////////////////////////////
//媒体照合に関連するPackage
/////////////////////////////////////////////////////////
Package JOB
	m_btvCurrent = "sagyou1"	// カレント作業番号
	
	//---------------------------------------------------
	// メインメソッド
	Method job_main()
		
		btvRet = ""
	Begin
		
		LOG:logMode = "normalinput"
		
		While 1
			Select Case m_btvCurrent
			Case "sagyou1"
				btvRet = SAGYOU1:sagyou_main()
			Case "sagyou_end"
				m_btvCurrent = "sagyou1"
				// ログファイルへの記録
			//Dell	LogRecord:fieldNum = 1
			//Dell	If ( LogRecord:Append() is false ) Then 
			//Dell		Handy:ShowMessageBox( "ログの書き込みに失敗しました。", "confirm" )
			//Dell	EndIf
				Wcontinue
			Case Else
				m_btvCurrent = "sagyou1"
			End Select
			
			
			//ループ判定処理 (次ループ準備)
			If btvRet eq "returntop" Then 
				Wbreak
			ElseIf btvRet eq "sagyouNG_Retry" Then 
				//特に何もしない
			ElseIf btvRet eq "sagyouNG_Skip" Then 
				m_btvCurrent = "sagyou1"//ループ先頭へ
			ElseIf btvRet eq "retry" Then 
				//特に何もしない
			Else
				m_btvCurrent = btvRet
			EndIf

		Wend

		m_btvCurrent = "sagyou1"
		System:Load(System:arg1, System:arg2, System:arg1, 0,0)
		Return (0)

	End Method



	//---------------------------------------------------
	// 入力判定メソッド
	Method input_loop(btvKeycode)
		btvRet
	Begin
		
		Select Case btvKeycode
		Case "ENT"
			Return ("next")
		Case "C"
			Return ("return1step")
		Case "TRG"
			read_OK()
			Return ("next")
		Case "ERR_BCR_INPUT"
			read_NG()
			Return ("retry")
		Case "ERR_RANGE_UPPER"
		Case "ERR_RANGE_LOWER"
		Case Else
			If LOG:logMode eq "modifylog" Then 
				Return ("retry") // 履歴修正時はここまで
			EndIf
		End Select
		
		
		// 履歴修正でない時は以下も調べる
		Select Case btvKeycode
		Case "F1"
			Return ("returntop") //Add
		Case "F2"			  //割り付けなし
		Case "F3"			  //割り付けなし
			LOG:log_main()            //Add
			Return ("retry")          //Add
		Case "L"			  //Fメニュー表示
		//Dell	UTL:utlDispFuncMenu()     
		//Dell	Return ("retry")        
			Return ("returntop")      //Add
		Case "R"			  //トリガキーに設定されています→"TRG"
		Case Else
			Return ("retry")
		End Select
		
		Return ("retry")

	End Method
	
	//---------------------------------------------------
	// 照合OK時のデバイス動作設定
	Method read_OK()
	Begin
		
		With Buzzer
			:onTime = 1 :offTime = 0 :loopCount = 1 :synchronization =false :pitch = 7 
		EndWith
		
		With Led
			:onTime = 1 :offTime = 0 :loopCount = 1 :synchronization =false :color = "green"
		EndWith

		Buzzer:Exec()
		Led:Exec()
		
	End Method
	
	//---------------------------------------------------
	// 読み取りNG時のデバイス動作設定
	Method read_NG()
	Begin
		
		With Buzzer
			:onTime = 15 :offTime = 0 :loopCount = 1 :synchronization =false :pitch = 7 
		EndWith
		
		With Led
			:onTime = 15 :offTime = 0 :loopCount = 1 :synchronization =false :color = "red"
		EndWith

		With Vibration
			:onTime = 15 :offTime = 0 :loopCount = 1 :synchronization =false
		EndWith

		Buzzer:Exec()
		Led:Exec()
		Vibration:Exec()
		
	End Method
	
	//---------------------------------------------------
	// 照合NG時のデバイス動作設定
	Method syougou_NG()
	Begin
		
		With Buzzer
			:onTime = 15 :offTime = 0 :loopCount = 1 :synchronization =false :pitch = 7 
		EndWith
		
		With Led
			:onTime = 15 :offTime = 0 :loopCount = 1 :synchronization =false :color = "orange"
		EndWith

		With Vibration
			:onTime = 15 :offTime = 0 :loopCount = 1 :synchronization =false
		EndWith

		Buzzer:Exec()
		Led:Exec()
		Vibration:Exec()
		
	End Method
	
	//---------------------------------------------------
	// 履歴印刷メソッド
	Method print_history()
		btvRet
	Begin
		btvRet = false
		If ( LogRecord:recordCount >=1 ) Then 
			btvRet = LogRecord:Read(LogRecord:recordCount)
		EndIf
		
		If ( btvRet is false ) Then 
			Handy:ShowMessageBox( "ログデータの取得に失敗しました。", "confirm" )
			Return ()
		EndIf
		
		With Screen
			:update = false
			:Clear()
			:posx = 1 :posy = 1 :multiColumn = 1 :reverse = false :font = 1 :OutputText("履歴印刷を")
			:posx = 1 :posy = 3 :multiColumn = 1 :reverse = false :font = 1 :OutputText("実行します")
			:update = true
		EndWith
		
		With UTL_PRT
			:Initialize( "2:test.prt" )
			:Move_Up( 1 ) // 履歴印刷モード
			:posy = 0// 一覧の先頭座標
			If ( :PrintHistory() is true ) Then 
				:Move_Down( 1 ) // 履歴印刷モード
				btvRet = :Exec()
			Else
				btvRet = false
			EndIf
			
			If btvRet is false Then 
				Handy:ShowMessageBox( "印刷に失敗しました。", "confirm" )
			EndIf
			While ( Handy:ShowMessageBox("再印刷しますか？", "yesno|no") is true )
				btvRet = :Exec()
				If btvRet is false Then 
					Handy:ShowMessageBox( "印刷に失敗しました。", "confirm" )
				EndIf
			Wend

		EndWith

	End Method

EndPackage


/////////////////////////////////////////////////////////
//新規作業に関連するPackage
/////////////////////////////////////////////////////////
Package SAGYOU1

	btvData = ""
	btvEachInput = ""
	btvTempdata
	btvTimes = 1
	logIndex = 1

	A_RCount = 0      //Add
	A_SeiriHT = ""    //Add
	A_Seiri10 = ""    //Add
	A_Msg  = ""       //Add
	A_INData = ""     //Add
	SettiNO = ""      //Add 
	SeiriNO = ""      //Add 

	Method sagyou_main()
		btvRet
		btvLastsagyou = "sagyou1"
		btvNextsagyou = "sagyou_end"
		
	Begin

		disp_normal()
		
		While 1
			btvRet = wait_input()
			
			If btvRet eq "next" Then 
				btvTempdata = btvEachInput
				A_INData = btvEachInput          //Add
				disp_result()
				Wbreak // 入力ループから抜ける
			ElseIf btvRet eq "return1step" Then 
				Return (btvLastsagyou) // ひとつ戻る
			ElseIf btvRet eq "retry" Then 
				Return ("retry") // 作業のリトライ
			Else
				Return (btvRet) // 作業 n へとぶ場合
			EndIf
		Wend
		
		btvData = btvTempdata
	//Dell	LogRecord:SetData(logIndex,btvTempdata)
		
		Return (btvNextsagyou)
		
	End Method
	


	//---------------------------------------------------
	// 入力メソッド
	Method wait_input()
		btvKeycode
		btvRet
		
	Begin
		
		BCR:timeOut = 50// 100[msec]単位
		
		With ITF
			:enable = true :useCD = false :includeCD = true 
			If ( :max > 4 ) Then  :min = 4 :max = 50  Else  :max = 50 :min = 4  EndIf
		EndWith
		
		With CODE128
			:enable = true :useCD = true :includeCD = false 
			If ( :max > 4 ) Then  :min = 4 :max = 50  Else  :max = 50 :min = 4  EndIf
		EndWith
		
		With InputString
			:posx = 5 :posy = 3 :multiColumn = 1 :reverse = false :font = 1 
			:data = "" // 初期値設定
			:inputAreaSize = 15
			:maxLength = 14
			:minLength = 1
			:enableKeyInput = true
			:scanMode = 1
			:shift = nil
			
			If LOG:logMode eq "modifylog" Then 
				:data = LogRecord:GetData(logIndex)
				:enableKeyInput = 1
				btvKeycode = :Exec()
				LOG:btvTempdata = :data
			Else
				btvKeycode = :Exec()
				btvEachInput=:data
			EndIf
			
		EndWith
		
		btvRet = JOB:input_loop(btvKeycode)
		
		Return (btvRet)
	End Method
	
	//---------------------------------------------------
	// 通常入力画面 表示メソッド
	Method disp_normal()
		btvDisp
	Begin
		With Screen
			:update = false
			:Clear()
			:posx = 5 :posy = 1 :multiColumn = 1 :reverse = false :font = 1 :OutputText("★検体照合★")
			:posx = 4 :posy = 3 :multiColumn = 1 :reverse = false :font = 1 :OutputText("(")
			:posx = 19 :posy = 3 :multiColumn = 1 :reverse = false :font = 1 :OutputText(")")
			:posx = 2 :posy = 5 :multiColumn = 1 :reverse = false :font = 1 :OutputText("設置者")
			:posx = 9 :posy = 5 :multiColumn = 1 :reverse = false :font = 1 :OutputText(A_INData)

			:posx = 2 :posy = 7 :multiColumn = 1 :reverse = false :font = 1 :OutputText("法定")
			:posx = 2 :posy = 9 :multiColumn = 1 :reverse = false :font = 1 :OutputText("9条")

//Test			:posx = 2 :posy = 7 :multiColumn = 1 :reverse = false :font = 1 :OutputText(SeiriNO)
//Test			:posx = 2 :posy = 9 :multiColumn = 1 :reverse = false :font = 1 :OutputText(SettiNO)

			:posx = 8 :posy = 7 :multiColumn = 1 :reverse = false :font = 2 :OutputText(A_SeiriHT)
			:posx = 8 :posy = 9 :multiColumn = 1 :reverse = false :font = 2 :OutputText(A_Seiri10)
			:posx = 2 :posy = 11 :multiColumn = 1 :reverse = false :font = 1 :OutputText(A_Msg)
			:update = true
		EndWith

	End Method

	//---------------------------------------------------
	// 入力結果画面 表示メソッド
	Method disp_result()
		btvDisp
		recordHandle    //add
		A_Suu1          //add
		A_Suu2          //add
		A_Suu3          //add
		GoFlg           //add

	Begin
//Add
		A_SeiriHT = ""
		A_Seiri10 = ""

		A_Msg = ""

		A_Suu1 = 0
		A_Suu2 = 0
		A_Suu3 = 0

		SettiNO = ""
		SeiriNO = "" 

		GoFlg = 0

		LogRecord:Initialize()
		LogRecord:name = "3:logdatht.txt"
		LogRecord:separator = "\t"
		A_RCount = 0
		A_RCount = LogRecord:recordCount

		//If  ( A_RCount.isDigit IS true )   Then
		If  ( A_RCount >  0 )   Then
			While  True
				A_Suu1 = A_Suu1 +  1
				IF  A_Suu1 >  A_RCount   Then
				    GoFlg = 1
				//     A_Msg = "NothingHT"
				    Wbreak
				EndIf

				A_Suu2 = A_Suu1 
				recordHandle = LogRecord:Read(A_Suu2)
				IF ( recordHandle is false  )  Then
				    A_Msg = "Read ErrorHT" & A_Suu2
				    Wbreak
				EndIf

				//     If LogRecord:GetData(1).length <> 10  then
				//         GoFlg = 1
				//         A_Msg = "NothingHT"
				//         Wbreak
				//     EndIf

				SettiNO = LogRecord:GetData(1)
				SeiriNO = LogRecord:GetData(2)
				
				If A_INData eq SettiNO Then
				   Zero_Del()
				   A_SeiriHT = SeiriNO
				   A_Msg = "Check OK"
				   Wbreak
				EndIf 

			 Wend
		 Else
		     GoFlg = 1
		 EndIf
//             EndIf

		If   GoFlg  == 1  Then
		    Ken_Check10()
		EndIf

//Add
	End Method

	//---------------------------------------------------
	// 照合NG時動作
	Method disp_syougouNG()
		btvDisp
	Begin
		
		JOB:syougou_NG()
		
		With Screen
			:update = false
			:Clear()
			:posx = 1 :posy = 6 :multiColumn = 1 :reverse = false :font = 4 :OutputText("照合エラー")
			:update = true
		EndWith
		
		Handy:KeyWait()
		
	End Method

	//---------------------------------------------------
	// LOGDAT10　照合   Add
	Method Ken_Check10()
		btvDisp
		recordHandle
		A_Suu1
		A_Suu2
		A_Suu3
	Begin
		A_Suu1 = 0
		A_Suu2 = 0
		A_Suu3 = 0
		A_Msg = ""

		SettiNO = ""
		SeiriNO = "" 

		LogRecord:Initialize()
		LogRecord:name = "3:logdat10.txt"
		LogRecord:separator = "\t"
		A_RCount = 0
		A_RCount = LogRecord:recordCount

		//If  ( A_RCount.isDigit IS true )   Then
		If  ( A_RCount >  0 )   Then

			While  True

				A_Suu1 = A_Suu1 +  1
				IF  A_Suu1 >  A_RCount   Then
					A_Msg = "Nothing"  
					with  Buzzer

						:onTime = 5    :offTime = 5   :loopCount = 1
						:pitch = 1     :volume = 2
						:synchronization = true
						:Exec()

					EndWith
					Wbreak
				EndIf

			A_Suu2 = A_Suu1 
			recordHandle = LogRecord:Read(A_Suu2)
			
			IF ( recordHandle is false  )  Then
				A_Msg = "Read Error10" & A_Suu2
				Wbreak

			EndIf

			SettiNO = LogRecord:GetData(1)
			SeiriNO = LogRecord:GetData(2)

			If A_INData eq SettiNO  Then
				Zero_Del()
				A_Seiri10 = SeiriNO
				A_Msg = "Check OK"
				Wbreak
			EndIf 

			Wend

		Else

			 A_Msg = "Nothing"

		EndIf

	End Method

	//---------------------------------------------------
	// 整理番号　ゼロサプレース   Add
	Method Zero_Del()
		A_Suu1
		W_Moji

	Begin
		A_Suu1 = 0
		While  True

			A_Suu1 = A_Suu1 +  1
			IF  A_Suu1 >  5   Then
				Wbreak
			Else
				IF  SeiriNO.Mid(A_Suu1 - 1 , 1) <>  "0"  Then
					Wbreak
				EndIf
			EndIf

		Wend

		Select  Case   A_Suu1
			Case   1
			 W_Moji  =  SeiriNO.Mid(0,5)
			CASE   2
			 W_Moji  =  " " & SeiriNO.Mid(1,4)
			CASE   3
			 W_Moji  =  "  " & SeiriNO.Mid(2,3)
			CASE   4
			 W_Moji  =  "   " & SeiriNO.Mid(3,2)
			CASE   5
			 W_Moji  =  "    " & SeiriNO.Mid(4,1)
		End Select

		 SeiriNO = W_Moji

	End Method

EndPackage


/////////////////////////////////////////////////////////
// 外部インターフェイスメソッド
/////////////////////////////////////////////////////////
Package UTL_INTERFACE
	// ---履歴関係---
	//---------------------------------------------------
	// 履歴画面表示メソッド
	Method disp_normallog()
		btvDisp
	Begin
		With Screen
			:update = false
			:Clear()
			:update = true
		EndWith

		Catch
			Handy:ShowMessageBox( "ログファイルが不正です。", "confirm" )
	End Method

	//---------------------------------------------------
	// 履歴修正メソッド
	Method disp_modifyEx(logSelect, logDispResult)
	Begin

		Select Case logSelect
		Case 1
			If ( logDispResult is true ) Then SAGYOU1:disp_result() Else SAGYOU1:disp_normal() EndIf
		Case Else
		End Select
		
	End Method
	
	//---------------------------------------------------
	// 履歴修正入力メソッド
	Method modify_input(logSelect)
	Begin
		
		Select Case logSelect
		Case 1
			Return ( SAGYOU1:wait_input() )
		Case Else
		End Select
		
		Return (1)
	End Method
	
	//---------------------------------------------------
	// 作業リスト表示メソッド
	Method disp_sagyou_list()
		btvDisp
	Begin
		With Screen
			:update = false
			:Clear()
			:update = true
		EndWith

	End Method

	//---------------------------------------------------
	// 入力回数取得メソッド
	Method get_InputTimes(times)
	Begin
		Select Case times
		Case 1
			Return ( SAGYOU1:btvTimes )
		Case Else
		End Select
		
		Return (1)
	End Method
	
EndPackage

