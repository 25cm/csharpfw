//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.18444
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FukjBizSystem.Application.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ShokenMstDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ShokenMstDataSet : global::System.Data.DataSet {
        
        private ShokenMstKensakuDataTable tableShokenMstKensaku;
        
        private SyokenMstSearchListDataTable tableSyokenMstSearchList;
        
        private ShokenCheckItemDataTable tableShokenCheckItem;
        
        private ShokenKekkaSelectDataTable tableShokenKekkaSelect;
        
        private ShokenMstDataTable tableShokenMst;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ShokenMstDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected ShokenMstDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ShokenMstKensaku"] != null)) {
                    base.Tables.Add(new ShokenMstKensakuDataTable(ds.Tables["ShokenMstKensaku"]));
                }
                if ((ds.Tables["SyokenMstSearchList"] != null)) {
                    base.Tables.Add(new SyokenMstSearchListDataTable(ds.Tables["SyokenMstSearchList"]));
                }
                if ((ds.Tables["ShokenCheckItem"] != null)) {
                    base.Tables.Add(new ShokenCheckItemDataTable(ds.Tables["ShokenCheckItem"]));
                }
                if ((ds.Tables["ShokenKekkaSelect"] != null)) {
                    base.Tables.Add(new ShokenKekkaSelectDataTable(ds.Tables["ShokenKekkaSelect"]));
                }
                if ((ds.Tables["ShokenMst"] != null)) {
                    base.Tables.Add(new ShokenMstDataTable(ds.Tables["ShokenMst"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShokenMstKensakuDataTable ShokenMstKensaku {
            get {
                return this.tableShokenMstKensaku;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SyokenMstSearchListDataTable SyokenMstSearchList {
            get {
                return this.tableSyokenMstSearchList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShokenCheckItemDataTable ShokenCheckItem {
            get {
                return this.tableShokenCheckItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShokenKekkaSelectDataTable ShokenKekkaSelect {
            get {
                return this.tableShokenKekkaSelect;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShokenMstDataTable ShokenMst {
            get {
                return this.tableShokenMst;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            ShokenMstDataSet cln = ((ShokenMstDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ShokenMstKensaku"] != null)) {
                    base.Tables.Add(new ShokenMstKensakuDataTable(ds.Tables["ShokenMstKensaku"]));
                }
                if ((ds.Tables["SyokenMstSearchList"] != null)) {
                    base.Tables.Add(new SyokenMstSearchListDataTable(ds.Tables["SyokenMstSearchList"]));
                }
                if ((ds.Tables["ShokenCheckItem"] != null)) {
                    base.Tables.Add(new ShokenCheckItemDataTable(ds.Tables["ShokenCheckItem"]));
                }
                if ((ds.Tables["ShokenKekkaSelect"] != null)) {
                    base.Tables.Add(new ShokenKekkaSelectDataTable(ds.Tables["ShokenKekkaSelect"]));
                }
                if ((ds.Tables["ShokenMst"] != null)) {
                    base.Tables.Add(new ShokenMstDataTable(ds.Tables["ShokenMst"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableShokenMstKensaku = ((ShokenMstKensakuDataTable)(base.Tables["ShokenMstKensaku"]));
            if ((initTable == true)) {
                if ((this.tableShokenMstKensaku != null)) {
                    this.tableShokenMstKensaku.InitVars();
                }
            }
            this.tableSyokenMstSearchList = ((SyokenMstSearchListDataTable)(base.Tables["SyokenMstSearchList"]));
            if ((initTable == true)) {
                if ((this.tableSyokenMstSearchList != null)) {
                    this.tableSyokenMstSearchList.InitVars();
                }
            }
            this.tableShokenCheckItem = ((ShokenCheckItemDataTable)(base.Tables["ShokenCheckItem"]));
            if ((initTable == true)) {
                if ((this.tableShokenCheckItem != null)) {
                    this.tableShokenCheckItem.InitVars();
                }
            }
            this.tableShokenKekkaSelect = ((ShokenKekkaSelectDataTable)(base.Tables["ShokenKekkaSelect"]));
            if ((initTable == true)) {
                if ((this.tableShokenKekkaSelect != null)) {
                    this.tableShokenKekkaSelect.InitVars();
                }
            }
            this.tableShokenMst = ((ShokenMstDataTable)(base.Tables["ShokenMst"]));
            if ((initTable == true)) {
                if ((this.tableShokenMst != null)) {
                    this.tableShokenMst.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "ShokenMstDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ShokenMstDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableShokenMstKensaku = new ShokenMstKensakuDataTable();
            base.Tables.Add(this.tableShokenMstKensaku);
            this.tableSyokenMstSearchList = new SyokenMstSearchListDataTable();
            base.Tables.Add(this.tableSyokenMstSearchList);
            this.tableShokenCheckItem = new ShokenCheckItemDataTable();
            base.Tables.Add(this.tableShokenCheckItem);
            this.tableShokenKekkaSelect = new ShokenKekkaSelectDataTable();
            base.Tables.Add(this.tableShokenKekkaSelect);
            this.tableShokenMst = new ShokenMstDataTable();
            base.Tables.Add(this.tableShokenMst);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeShokenMstKensaku() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSyokenMstSearchList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeShokenCheckItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeShokenKekkaSelect() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeShokenMst() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ShokenMstDataSet ds = new ShokenMstDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ShokenMstKensakuRowChangeEventHandler(object sender, ShokenMstKensakuRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SyokenMstSearchListRowChangeEventHandler(object sender, SyokenMstSearchListRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ShokenCheckItemRowChangeEventHandler(object sender, ShokenCheckItemRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ShokenKekkaSelectRowChangeEventHandler(object sender, ShokenKekkaSelectRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ShokenMstRowChangeEventHandler(object sender, ShokenMstRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShokenMstKensakuDataTable : global::System.Data.TypedTableBase<ShokenMstKensakuRow> {
            
            private global::System.Data.DataColumn columnShokenKbn;
            
            private global::System.Data.DataColumn columnShokenCd;
            
            private global::System.Data.DataColumn columnShokenJuyodo;
            
            private global::System.Data.DataColumn columnShokenHandan;
            
            private global::System.Data.DataColumn columnShokenWd;
            
            private global::System.Data.DataColumn columnShokenHantei;
            
            private global::System.Data.DataColumn columnShokenBiko;
            
            private global::System.Data.DataColumn columnShokenHokokuLevel;
            
            private global::System.Data.DataColumn columnShokenShitekiKbn;
            
            private global::System.Data.DataColumn columnShokenShitekiNo;
            
            private global::System.Data.DataColumn columnShokenDojiCheckKomoku;
            
            private global::System.Data.DataColumn columnShokenWdRyaku;
            
            private global::System.Data.DataColumn columnShokenFollowFlg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstKensakuDataTable() {
                this.TableName = "ShokenMstKensaku";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenMstKensakuDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ShokenMstKensakuDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenKbnColumn {
                get {
                    return this.columnShokenKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenCdColumn {
                get {
                    return this.columnShokenCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenJuyodoColumn {
                get {
                    return this.columnShokenJuyodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHandanColumn {
                get {
                    return this.columnShokenHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdColumn {
                get {
                    return this.columnShokenWd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHanteiColumn {
                get {
                    return this.columnShokenHantei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenBikoColumn {
                get {
                    return this.columnShokenBiko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHokokuLevelColumn {
                get {
                    return this.columnShokenHokokuLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiKbnColumn {
                get {
                    return this.columnShokenShitekiKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiNoColumn {
                get {
                    return this.columnShokenShitekiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenDojiCheckKomokuColumn {
                get {
                    return this.columnShokenDojiCheckKomoku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdRyakuColumn {
                get {
                    return this.columnShokenWdRyaku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenFollowFlgColumn {
                get {
                    return this.columnShokenFollowFlg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstKensakuRow this[int index] {
                get {
                    return ((ShokenMstKensakuRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstKensakuRowChangeEventHandler ShokenMstKensakuRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstKensakuRowChangeEventHandler ShokenMstKensakuRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstKensakuRowChangeEventHandler ShokenMstKensakuRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstKensakuRowChangeEventHandler ShokenMstKensakuRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddShokenMstKensakuRow(ShokenMstKensakuRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstKensakuRow AddShokenMstKensakuRow(string ShokenKbn, string ShokenCd, string ShokenJuyodo, string ShokenHandan, string ShokenWd, string ShokenHantei, string ShokenBiko, string ShokenHokokuLevel, string ShokenShitekiKbn, string ShokenShitekiNo, string ShokenDojiCheckKomoku, string ShokenWdRyaku, string ShokenFollowFlg) {
                ShokenMstKensakuRow rowShokenMstKensakuRow = ((ShokenMstKensakuRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShokenKbn,
                        ShokenCd,
                        ShokenJuyodo,
                        ShokenHandan,
                        ShokenWd,
                        ShokenHantei,
                        ShokenBiko,
                        ShokenHokokuLevel,
                        ShokenShitekiKbn,
                        ShokenShitekiNo,
                        ShokenDojiCheckKomoku,
                        ShokenWdRyaku,
                        ShokenFollowFlg};
                rowShokenMstKensakuRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowShokenMstKensakuRow);
                return rowShokenMstKensakuRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ShokenMstKensakuDataTable cln = ((ShokenMstKensakuDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ShokenMstKensakuDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnShokenKbn = base.Columns["ShokenKbn"];
                this.columnShokenCd = base.Columns["ShokenCd"];
                this.columnShokenJuyodo = base.Columns["ShokenJuyodo"];
                this.columnShokenHandan = base.Columns["ShokenHandan"];
                this.columnShokenWd = base.Columns["ShokenWd"];
                this.columnShokenHantei = base.Columns["ShokenHantei"];
                this.columnShokenBiko = base.Columns["ShokenBiko"];
                this.columnShokenHokokuLevel = base.Columns["ShokenHokokuLevel"];
                this.columnShokenShitekiKbn = base.Columns["ShokenShitekiKbn"];
                this.columnShokenShitekiNo = base.Columns["ShokenShitekiNo"];
                this.columnShokenDojiCheckKomoku = base.Columns["ShokenDojiCheckKomoku"];
                this.columnShokenWdRyaku = base.Columns["ShokenWdRyaku"];
                this.columnShokenFollowFlg = base.Columns["ShokenFollowFlg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnShokenKbn = new global::System.Data.DataColumn("ShokenKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenKbn);
                this.columnShokenCd = new global::System.Data.DataColumn("ShokenCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenCd);
                this.columnShokenJuyodo = new global::System.Data.DataColumn("ShokenJuyodo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenJuyodo);
                this.columnShokenHandan = new global::System.Data.DataColumn("ShokenHandan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHandan);
                this.columnShokenWd = new global::System.Data.DataColumn("ShokenWd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWd);
                this.columnShokenHantei = new global::System.Data.DataColumn("ShokenHantei", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHantei);
                this.columnShokenBiko = new global::System.Data.DataColumn("ShokenBiko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenBiko);
                this.columnShokenHokokuLevel = new global::System.Data.DataColumn("ShokenHokokuLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHokokuLevel);
                this.columnShokenShitekiKbn = new global::System.Data.DataColumn("ShokenShitekiKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiKbn);
                this.columnShokenShitekiNo = new global::System.Data.DataColumn("ShokenShitekiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiNo);
                this.columnShokenDojiCheckKomoku = new global::System.Data.DataColumn("ShokenDojiCheckKomoku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenDojiCheckKomoku);
                this.columnShokenWdRyaku = new global::System.Data.DataColumn("ShokenWdRyaku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWdRyaku);
                this.columnShokenFollowFlg = new global::System.Data.DataColumn("ShokenFollowFlg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenFollowFlg);
                this.columnShokenKbn.MaxLength = 3;
                this.columnShokenCd.MaxLength = 3;
                this.columnShokenJuyodo.MaxLength = 1;
                this.columnShokenHandan.MaxLength = 1;
                this.columnShokenWd.MaxLength = 160;
                this.columnShokenHantei.MaxLength = 1;
                this.columnShokenBiko.MaxLength = 250;
                this.columnShokenHokokuLevel.MaxLength = 1;
                this.columnShokenShitekiKbn.MaxLength = 1;
                this.columnShokenShitekiNo.MaxLength = 2;
                this.columnShokenDojiCheckKomoku.MaxLength = 3;
                this.columnShokenWdRyaku.MaxLength = 80;
                this.columnShokenFollowFlg.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstKensakuRow NewShokenMstKensakuRow() {
                return ((ShokenMstKensakuRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ShokenMstKensakuRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ShokenMstKensakuRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShokenMstKensakuRowChanged != null)) {
                    this.ShokenMstKensakuRowChanged(this, new ShokenMstKensakuRowChangeEvent(((ShokenMstKensakuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShokenMstKensakuRowChanging != null)) {
                    this.ShokenMstKensakuRowChanging(this, new ShokenMstKensakuRowChangeEvent(((ShokenMstKensakuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShokenMstKensakuRowDeleted != null)) {
                    this.ShokenMstKensakuRowDeleted(this, new ShokenMstKensakuRowChangeEvent(((ShokenMstKensakuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShokenMstKensakuRowDeleting != null)) {
                    this.ShokenMstKensakuRowDeleting(this, new ShokenMstKensakuRowChangeEvent(((ShokenMstKensakuRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveShokenMstKensakuRow(ShokenMstKensakuRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ShokenMstDataSet ds = new ShokenMstDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShokenMstKensakuDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SyokenMstSearchListDataTable : global::System.Data.TypedTableBase<SyokenMstSearchListRow> {
            
            private global::System.Data.DataColumn columnShokenKbn;
            
            private global::System.Data.DataColumn columnShokenCd;
            
            private global::System.Data.DataColumn columnShokenWd;
            
            private global::System.Data.DataColumn columnShokenJuyodo;
            
            private global::System.Data.DataColumn columnShokenHandan;
            
            private global::System.Data.DataColumn columnShokenHantei;
            
            private global::System.Data.DataColumn columnShokenBiko;
            
            private global::System.Data.DataColumn columnjuyodoCol;
            
            private global::System.Data.DataColumn columnhandanCol;
            
            private global::System.Data.DataColumn columnhanteiCol;
            
            private global::System.Data.DataColumn columnShokenShitekiKbn;
            
            private global::System.Data.DataColumn columnShokenShitekiNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListDataTable() {
                this.TableName = "SyokenMstSearchList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SyokenMstSearchListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SyokenMstSearchListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenKbnColumn {
                get {
                    return this.columnShokenKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenCdColumn {
                get {
                    return this.columnShokenCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdColumn {
                get {
                    return this.columnShokenWd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenJuyodoColumn {
                get {
                    return this.columnShokenJuyodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHandanColumn {
                get {
                    return this.columnShokenHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHanteiColumn {
                get {
                    return this.columnShokenHantei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenBikoColumn {
                get {
                    return this.columnShokenBiko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn juyodoColColumn {
                get {
                    return this.columnjuyodoCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn handanColColumn {
                get {
                    return this.columnhandanCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn hanteiColColumn {
                get {
                    return this.columnhanteiCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiKbnColumn {
                get {
                    return this.columnShokenShitekiKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiNoColumn {
                get {
                    return this.columnShokenShitekiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListRow this[int index] {
                get {
                    return ((SyokenMstSearchListRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SyokenMstSearchListRowChangeEventHandler SyokenMstSearchListRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SyokenMstSearchListRowChangeEventHandler SyokenMstSearchListRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SyokenMstSearchListRowChangeEventHandler SyokenMstSearchListRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SyokenMstSearchListRowChangeEventHandler SyokenMstSearchListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSyokenMstSearchListRow(SyokenMstSearchListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListRow AddSyokenMstSearchListRow(string ShokenKbn, string ShokenCd, string ShokenWd, string ShokenJuyodo, string ShokenHandan, string ShokenHantei, string ShokenBiko, string juyodoCol, string handanCol, string hanteiCol, string ShokenShitekiKbn, string ShokenShitekiNo) {
                SyokenMstSearchListRow rowSyokenMstSearchListRow = ((SyokenMstSearchListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShokenKbn,
                        ShokenCd,
                        ShokenWd,
                        ShokenJuyodo,
                        ShokenHandan,
                        ShokenHantei,
                        ShokenBiko,
                        juyodoCol,
                        handanCol,
                        hanteiCol,
                        ShokenShitekiKbn,
                        ShokenShitekiNo};
                rowSyokenMstSearchListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSyokenMstSearchListRow);
                return rowSyokenMstSearchListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListRow FindByShokenKbnShokenCd(string ShokenKbn, string ShokenCd) {
                return ((SyokenMstSearchListRow)(this.Rows.Find(new object[] {
                            ShokenKbn,
                            ShokenCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SyokenMstSearchListDataTable cln = ((SyokenMstSearchListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SyokenMstSearchListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnShokenKbn = base.Columns["ShokenKbn"];
                this.columnShokenCd = base.Columns["ShokenCd"];
                this.columnShokenWd = base.Columns["ShokenWd"];
                this.columnShokenJuyodo = base.Columns["ShokenJuyodo"];
                this.columnShokenHandan = base.Columns["ShokenHandan"];
                this.columnShokenHantei = base.Columns["ShokenHantei"];
                this.columnShokenBiko = base.Columns["ShokenBiko"];
                this.columnjuyodoCol = base.Columns["juyodoCol"];
                this.columnhandanCol = base.Columns["handanCol"];
                this.columnhanteiCol = base.Columns["hanteiCol"];
                this.columnShokenShitekiKbn = base.Columns["ShokenShitekiKbn"];
                this.columnShokenShitekiNo = base.Columns["ShokenShitekiNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnShokenKbn = new global::System.Data.DataColumn("ShokenKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenKbn);
                this.columnShokenCd = new global::System.Data.DataColumn("ShokenCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenCd);
                this.columnShokenWd = new global::System.Data.DataColumn("ShokenWd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWd);
                this.columnShokenJuyodo = new global::System.Data.DataColumn("ShokenJuyodo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenJuyodo);
                this.columnShokenHandan = new global::System.Data.DataColumn("ShokenHandan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHandan);
                this.columnShokenHantei = new global::System.Data.DataColumn("ShokenHantei", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHantei);
                this.columnShokenBiko = new global::System.Data.DataColumn("ShokenBiko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenBiko);
                this.columnjuyodoCol = new global::System.Data.DataColumn("juyodoCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjuyodoCol);
                this.columnhandanCol = new global::System.Data.DataColumn("handanCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhandanCol);
                this.columnhanteiCol = new global::System.Data.DataColumn("hanteiCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhanteiCol);
                this.columnShokenShitekiKbn = new global::System.Data.DataColumn("ShokenShitekiKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiKbn);
                this.columnShokenShitekiNo = new global::System.Data.DataColumn("ShokenShitekiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnShokenKbn,
                                this.columnShokenCd}, true));
                this.columnShokenKbn.AllowDBNull = false;
                this.columnShokenKbn.MaxLength = 3;
                this.columnShokenCd.AllowDBNull = false;
                this.columnShokenCd.MaxLength = 3;
                this.columnShokenWd.AllowDBNull = false;
                this.columnShokenWd.MaxLength = 160;
                this.columnShokenJuyodo.AllowDBNull = false;
                this.columnShokenJuyodo.MaxLength = 1;
                this.columnShokenHandan.AllowDBNull = false;
                this.columnShokenHandan.MaxLength = 1;
                this.columnShokenHantei.AllowDBNull = false;
                this.columnShokenHantei.MaxLength = 1;
                this.columnShokenBiko.AllowDBNull = false;
                this.columnShokenBiko.MaxLength = 250;
                this.columnjuyodoCol.MaxLength = 100;
                this.columnhandanCol.MaxLength = 100;
                this.columnhanteiCol.MaxLength = 100;
                this.columnShokenShitekiKbn.AllowDBNull = false;
                this.columnShokenShitekiKbn.MaxLength = 1;
                this.columnShokenShitekiNo.AllowDBNull = false;
                this.columnShokenShitekiNo.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListRow NewSyokenMstSearchListRow() {
                return ((SyokenMstSearchListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SyokenMstSearchListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SyokenMstSearchListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SyokenMstSearchListRowChanged != null)) {
                    this.SyokenMstSearchListRowChanged(this, new SyokenMstSearchListRowChangeEvent(((SyokenMstSearchListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SyokenMstSearchListRowChanging != null)) {
                    this.SyokenMstSearchListRowChanging(this, new SyokenMstSearchListRowChangeEvent(((SyokenMstSearchListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SyokenMstSearchListRowDeleted != null)) {
                    this.SyokenMstSearchListRowDeleted(this, new SyokenMstSearchListRowChangeEvent(((SyokenMstSearchListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SyokenMstSearchListRowDeleting != null)) {
                    this.SyokenMstSearchListRowDeleting(this, new SyokenMstSearchListRowChangeEvent(((SyokenMstSearchListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSyokenMstSearchListRow(SyokenMstSearchListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ShokenMstDataSet ds = new ShokenMstDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SyokenMstSearchListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShokenCheckItemDataTable : global::System.Data.TypedTableBase<ShokenCheckItemRow> {
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenCheckItemDataTable() {
                this.TableName = "ShokenCheckItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenCheckItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ShokenCheckItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenCheckItemRow this[int index] {
                get {
                    return ((ShokenCheckItemRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenCheckItemRowChangeEventHandler ShokenCheckItemRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenCheckItemRowChangeEventHandler ShokenCheckItemRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenCheckItemRowChangeEventHandler ShokenCheckItemRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenCheckItemRowChangeEventHandler ShokenCheckItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddShokenCheckItemRow(ShokenCheckItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenCheckItemRow AddShokenCheckItemRow(string Code, string Name) {
                ShokenCheckItemRow rowShokenCheckItemRow = ((ShokenCheckItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Code,
                        Name};
                rowShokenCheckItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowShokenCheckItemRow);
                return rowShokenCheckItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ShokenCheckItemDataTable cln = ((ShokenCheckItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ShokenCheckItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCode = base.Columns["Code"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCode.MaxLength = 3;
                this.columnName.MaxLength = 80;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenCheckItemRow NewShokenCheckItemRow() {
                return ((ShokenCheckItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ShokenCheckItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ShokenCheckItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShokenCheckItemRowChanged != null)) {
                    this.ShokenCheckItemRowChanged(this, new ShokenCheckItemRowChangeEvent(((ShokenCheckItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShokenCheckItemRowChanging != null)) {
                    this.ShokenCheckItemRowChanging(this, new ShokenCheckItemRowChangeEvent(((ShokenCheckItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShokenCheckItemRowDeleted != null)) {
                    this.ShokenCheckItemRowDeleted(this, new ShokenCheckItemRowChangeEvent(((ShokenCheckItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShokenCheckItemRowDeleting != null)) {
                    this.ShokenCheckItemRowDeleting(this, new ShokenCheckItemRowChangeEvent(((ShokenCheckItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveShokenCheckItemRow(ShokenCheckItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ShokenMstDataSet ds = new ShokenMstDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShokenCheckItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShokenKekkaSelectDataTable : global::System.Data.TypedTableBase<ShokenKekkaSelectRow> {
            
            private global::System.Data.DataColumn columnShokenKbn;
            
            private global::System.Data.DataColumn columnShokenCd;
            
            private global::System.Data.DataColumn columnShokenWd;
            
            private global::System.Data.DataColumn columnJuyodo;
            
            private global::System.Data.DataColumn columnHandan;
            
            private global::System.Data.DataColumn columnHantei;
            
            private global::System.Data.DataColumn columnShokenBiko;
            
            private global::System.Data.DataColumn columnShokenJuyodo;
            
            private global::System.Data.DataColumn columnShokenHandan;
            
            private global::System.Data.DataColumn columnShokenHantei;
            
            private global::System.Data.DataColumn columnShokenHyokiJun;
            
            private global::System.Data.DataColumn columnShokenWdRyaku;
            
            private global::System.Data.DataColumn columnShokenHokokuLevel;
            
            private global::System.Data.DataColumn columnShokenShitekiKbn;
            
            private global::System.Data.DataColumn columnShokenShitekiNo;
            
            private global::System.Data.DataColumn columnShokenDojiCheckKomoku;
            
            private global::System.Data.DataColumn columnShokenDojiCheckHandan;
            
            private global::System.Data.DataColumn columnShokenFollowFlg;
            
            private global::System.Data.DataColumn columnShokenTaishoKensaBitMask;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectDataTable() {
                this.TableName = "ShokenKekkaSelect";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenKekkaSelectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ShokenKekkaSelectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenKbnColumn {
                get {
                    return this.columnShokenKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenCdColumn {
                get {
                    return this.columnShokenCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdColumn {
                get {
                    return this.columnShokenWd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn JuyodoColumn {
                get {
                    return this.columnJuyodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HandanColumn {
                get {
                    return this.columnHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HanteiColumn {
                get {
                    return this.columnHantei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenBikoColumn {
                get {
                    return this.columnShokenBiko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenJuyodoColumn {
                get {
                    return this.columnShokenJuyodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHandanColumn {
                get {
                    return this.columnShokenHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHanteiColumn {
                get {
                    return this.columnShokenHantei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHyokiJunColumn {
                get {
                    return this.columnShokenHyokiJun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdRyakuColumn {
                get {
                    return this.columnShokenWdRyaku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHokokuLevelColumn {
                get {
                    return this.columnShokenHokokuLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiKbnColumn {
                get {
                    return this.columnShokenShitekiKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiNoColumn {
                get {
                    return this.columnShokenShitekiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenDojiCheckKomokuColumn {
                get {
                    return this.columnShokenDojiCheckKomoku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenDojiCheckHandanColumn {
                get {
                    return this.columnShokenDojiCheckHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenFollowFlgColumn {
                get {
                    return this.columnShokenFollowFlg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenTaishoKensaBitMaskColumn {
                get {
                    return this.columnShokenTaishoKensaBitMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectRow this[int index] {
                get {
                    return ((ShokenKekkaSelectRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenKekkaSelectRowChangeEventHandler ShokenKekkaSelectRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenKekkaSelectRowChangeEventHandler ShokenKekkaSelectRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenKekkaSelectRowChangeEventHandler ShokenKekkaSelectRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenKekkaSelectRowChangeEventHandler ShokenKekkaSelectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddShokenKekkaSelectRow(ShokenKekkaSelectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectRow AddShokenKekkaSelectRow(
                        string ShokenKbn, 
                        string ShokenCd, 
                        string ShokenWd, 
                        string Juyodo, 
                        string Handan, 
                        string Hantei, 
                        string ShokenBiko, 
                        string ShokenJuyodo, 
                        string ShokenHandan, 
                        string ShokenHantei, 
                        string ShokenHyokiJun, 
                        string ShokenWdRyaku, 
                        string ShokenHokokuLevel, 
                        string ShokenShitekiKbn, 
                        string ShokenShitekiNo, 
                        string ShokenDojiCheckKomoku, 
                        string ShokenDojiCheckHandan, 
                        string ShokenFollowFlg, 
                        int ShokenTaishoKensaBitMask) {
                ShokenKekkaSelectRow rowShokenKekkaSelectRow = ((ShokenKekkaSelectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShokenKbn,
                        ShokenCd,
                        ShokenWd,
                        Juyodo,
                        Handan,
                        Hantei,
                        ShokenBiko,
                        ShokenJuyodo,
                        ShokenHandan,
                        ShokenHantei,
                        ShokenHyokiJun,
                        ShokenWdRyaku,
                        ShokenHokokuLevel,
                        ShokenShitekiKbn,
                        ShokenShitekiNo,
                        ShokenDojiCheckKomoku,
                        ShokenDojiCheckHandan,
                        ShokenFollowFlg,
                        ShokenTaishoKensaBitMask};
                rowShokenKekkaSelectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowShokenKekkaSelectRow);
                return rowShokenKekkaSelectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectRow FindByShokenKbnShokenCd(string ShokenKbn, string ShokenCd) {
                return ((ShokenKekkaSelectRow)(this.Rows.Find(new object[] {
                            ShokenKbn,
                            ShokenCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ShokenKekkaSelectDataTable cln = ((ShokenKekkaSelectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ShokenKekkaSelectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnShokenKbn = base.Columns["ShokenKbn"];
                this.columnShokenCd = base.Columns["ShokenCd"];
                this.columnShokenWd = base.Columns["ShokenWd"];
                this.columnJuyodo = base.Columns["Juyodo"];
                this.columnHandan = base.Columns["Handan"];
                this.columnHantei = base.Columns["Hantei"];
                this.columnShokenBiko = base.Columns["ShokenBiko"];
                this.columnShokenJuyodo = base.Columns["ShokenJuyodo"];
                this.columnShokenHandan = base.Columns["ShokenHandan"];
                this.columnShokenHantei = base.Columns["ShokenHantei"];
                this.columnShokenHyokiJun = base.Columns["ShokenHyokiJun"];
                this.columnShokenWdRyaku = base.Columns["ShokenWdRyaku"];
                this.columnShokenHokokuLevel = base.Columns["ShokenHokokuLevel"];
                this.columnShokenShitekiKbn = base.Columns["ShokenShitekiKbn"];
                this.columnShokenShitekiNo = base.Columns["ShokenShitekiNo"];
                this.columnShokenDojiCheckKomoku = base.Columns["ShokenDojiCheckKomoku"];
                this.columnShokenDojiCheckHandan = base.Columns["ShokenDojiCheckHandan"];
                this.columnShokenFollowFlg = base.Columns["ShokenFollowFlg"];
                this.columnShokenTaishoKensaBitMask = base.Columns["ShokenTaishoKensaBitMask"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnShokenKbn = new global::System.Data.DataColumn("ShokenKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenKbn);
                this.columnShokenCd = new global::System.Data.DataColumn("ShokenCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenCd);
                this.columnShokenWd = new global::System.Data.DataColumn("ShokenWd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWd);
                this.columnJuyodo = new global::System.Data.DataColumn("Juyodo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJuyodo);
                this.columnHandan = new global::System.Data.DataColumn("Handan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHandan);
                this.columnHantei = new global::System.Data.DataColumn("Hantei", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHantei);
                this.columnShokenBiko = new global::System.Data.DataColumn("ShokenBiko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenBiko);
                this.columnShokenJuyodo = new global::System.Data.DataColumn("ShokenJuyodo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenJuyodo);
                this.columnShokenHandan = new global::System.Data.DataColumn("ShokenHandan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHandan);
                this.columnShokenHantei = new global::System.Data.DataColumn("ShokenHantei", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHantei);
                this.columnShokenHyokiJun = new global::System.Data.DataColumn("ShokenHyokiJun", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHyokiJun);
                this.columnShokenWdRyaku = new global::System.Data.DataColumn("ShokenWdRyaku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWdRyaku);
                this.columnShokenHokokuLevel = new global::System.Data.DataColumn("ShokenHokokuLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHokokuLevel);
                this.columnShokenShitekiKbn = new global::System.Data.DataColumn("ShokenShitekiKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiKbn);
                this.columnShokenShitekiNo = new global::System.Data.DataColumn("ShokenShitekiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiNo);
                this.columnShokenDojiCheckKomoku = new global::System.Data.DataColumn("ShokenDojiCheckKomoku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenDojiCheckKomoku);
                this.columnShokenDojiCheckHandan = new global::System.Data.DataColumn("ShokenDojiCheckHandan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenDojiCheckHandan);
                this.columnShokenFollowFlg = new global::System.Data.DataColumn("ShokenFollowFlg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenFollowFlg);
                this.columnShokenTaishoKensaBitMask = new global::System.Data.DataColumn("ShokenTaishoKensaBitMask", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenTaishoKensaBitMask);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnShokenKbn,
                                this.columnShokenCd}, true));
                this.columnShokenKbn.AllowDBNull = false;
                this.columnShokenKbn.MaxLength = 3;
                this.columnShokenCd.AllowDBNull = false;
                this.columnShokenCd.MaxLength = 3;
                this.columnShokenWd.AllowDBNull = false;
                this.columnShokenWd.MaxLength = 160;
                this.columnJuyodo.MaxLength = 100;
                this.columnHandan.MaxLength = 100;
                this.columnHantei.MaxLength = 100;
                this.columnShokenBiko.MaxLength = 2;
                this.columnShokenJuyodo.AllowDBNull = false;
                this.columnShokenJuyodo.MaxLength = 1;
                this.columnShokenHandan.AllowDBNull = false;
                this.columnShokenHandan.MaxLength = 1;
                this.columnShokenHantei.AllowDBNull = false;
                this.columnShokenHantei.MaxLength = 1;
                this.columnShokenHyokiJun.AllowDBNull = false;
                this.columnShokenHyokiJun.MaxLength = 1;
                this.columnShokenWdRyaku.AllowDBNull = false;
                this.columnShokenWdRyaku.MaxLength = 80;
                this.columnShokenHokokuLevel.AllowDBNull = false;
                this.columnShokenHokokuLevel.MaxLength = 1;
                this.columnShokenShitekiKbn.AllowDBNull = false;
                this.columnShokenShitekiKbn.MaxLength = 1;
                this.columnShokenShitekiNo.AllowDBNull = false;
                this.columnShokenShitekiNo.MaxLength = 2;
                this.columnShokenDojiCheckKomoku.AllowDBNull = false;
                this.columnShokenDojiCheckKomoku.MaxLength = 3;
                this.columnShokenDojiCheckHandan.AllowDBNull = false;
                this.columnShokenDojiCheckHandan.MaxLength = 1;
                this.columnShokenFollowFlg.AllowDBNull = false;
                this.columnShokenFollowFlg.MaxLength = 1;
                this.columnShokenTaishoKensaBitMask.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectRow NewShokenKekkaSelectRow() {
                return ((ShokenKekkaSelectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ShokenKekkaSelectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ShokenKekkaSelectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShokenKekkaSelectRowChanged != null)) {
                    this.ShokenKekkaSelectRowChanged(this, new ShokenKekkaSelectRowChangeEvent(((ShokenKekkaSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShokenKekkaSelectRowChanging != null)) {
                    this.ShokenKekkaSelectRowChanging(this, new ShokenKekkaSelectRowChangeEvent(((ShokenKekkaSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShokenKekkaSelectRowDeleted != null)) {
                    this.ShokenKekkaSelectRowDeleted(this, new ShokenKekkaSelectRowChangeEvent(((ShokenKekkaSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShokenKekkaSelectRowDeleting != null)) {
                    this.ShokenKekkaSelectRowDeleting(this, new ShokenKekkaSelectRowChangeEvent(((ShokenKekkaSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveShokenKekkaSelectRow(ShokenKekkaSelectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ShokenMstDataSet ds = new ShokenMstDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShokenKekkaSelectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShokenMstDataTable : global::System.Data.TypedTableBase<ShokenMstRow> {
            
            private global::System.Data.DataColumn columnShokenKbn;
            
            private global::System.Data.DataColumn columnShokenCd;
            
            private global::System.Data.DataColumn columnShokenJuyodo;
            
            private global::System.Data.DataColumn columnShokenHyokiJun;
            
            private global::System.Data.DataColumn columnShokenHandan;
            
            private global::System.Data.DataColumn columnShokenWd;
            
            private global::System.Data.DataColumn columnShokenWdRyaku;
            
            private global::System.Data.DataColumn columnShokenHantei;
            
            private global::System.Data.DataColumn columnShokenBiko;
            
            private global::System.Data.DataColumn columnShokenHokokuLevel;
            
            private global::System.Data.DataColumn columnShokenShitekiKbn;
            
            private global::System.Data.DataColumn columnShokenShitekiNo;
            
            private global::System.Data.DataColumn columnShokenDojiCheckKomoku;
            
            private global::System.Data.DataColumn columnShokenDojiCheckHandan;
            
            private global::System.Data.DataColumn columnShokenFollowFlg;
            
            private global::System.Data.DataColumn columnShokenTaishoKensaBitMask;
            
            private global::System.Data.DataColumn columnInsertDt;
            
            private global::System.Data.DataColumn columnInsertUser;
            
            private global::System.Data.DataColumn columnInsertTarm;
            
            private global::System.Data.DataColumn columnUpdateDt;
            
            private global::System.Data.DataColumn columnUpdateUser;
            
            private global::System.Data.DataColumn columnUpdateTarm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstDataTable() {
                this.TableName = "ShokenMst";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenMstDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ShokenMstDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenKbnColumn {
                get {
                    return this.columnShokenKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenCdColumn {
                get {
                    return this.columnShokenCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenJuyodoColumn {
                get {
                    return this.columnShokenJuyodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHyokiJunColumn {
                get {
                    return this.columnShokenHyokiJun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHandanColumn {
                get {
                    return this.columnShokenHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdColumn {
                get {
                    return this.columnShokenWd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenWdRyakuColumn {
                get {
                    return this.columnShokenWdRyaku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHanteiColumn {
                get {
                    return this.columnShokenHantei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenBikoColumn {
                get {
                    return this.columnShokenBiko;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenHokokuLevelColumn {
                get {
                    return this.columnShokenHokokuLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiKbnColumn {
                get {
                    return this.columnShokenShitekiKbn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenShitekiNoColumn {
                get {
                    return this.columnShokenShitekiNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenDojiCheckKomokuColumn {
                get {
                    return this.columnShokenDojiCheckKomoku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenDojiCheckHandanColumn {
                get {
                    return this.columnShokenDojiCheckHandan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenFollowFlgColumn {
                get {
                    return this.columnShokenFollowFlg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShokenTaishoKensaBitMaskColumn {
                get {
                    return this.columnShokenTaishoKensaBitMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsertDtColumn {
                get {
                    return this.columnInsertDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsertUserColumn {
                get {
                    return this.columnInsertUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsertTarmColumn {
                get {
                    return this.columnInsertTarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UpdateDtColumn {
                get {
                    return this.columnUpdateDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UpdateUserColumn {
                get {
                    return this.columnUpdateUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UpdateTarmColumn {
                get {
                    return this.columnUpdateTarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstRow this[int index] {
                get {
                    return ((ShokenMstRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstRowChangeEventHandler ShokenMstRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstRowChangeEventHandler ShokenMstRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstRowChangeEventHandler ShokenMstRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShokenMstRowChangeEventHandler ShokenMstRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddShokenMstRow(ShokenMstRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstRow AddShokenMstRow(
                        string ShokenKbn, 
                        string ShokenCd, 
                        string ShokenJuyodo, 
                        string ShokenHyokiJun, 
                        string ShokenHandan, 
                        string ShokenWd, 
                        string ShokenWdRyaku, 
                        string ShokenHantei, 
                        string ShokenBiko, 
                        string ShokenHokokuLevel, 
                        string ShokenShitekiKbn, 
                        string ShokenShitekiNo, 
                        string ShokenDojiCheckKomoku, 
                        string ShokenDojiCheckHandan, 
                        string ShokenFollowFlg, 
                        int ShokenTaishoKensaBitMask, 
                        System.DateTime InsertDt, 
                        string InsertUser, 
                        string InsertTarm, 
                        System.DateTime UpdateDt, 
                        string UpdateUser, 
                        string UpdateTarm) {
                ShokenMstRow rowShokenMstRow = ((ShokenMstRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShokenKbn,
                        ShokenCd,
                        ShokenJuyodo,
                        ShokenHyokiJun,
                        ShokenHandan,
                        ShokenWd,
                        ShokenWdRyaku,
                        ShokenHantei,
                        ShokenBiko,
                        ShokenHokokuLevel,
                        ShokenShitekiKbn,
                        ShokenShitekiNo,
                        ShokenDojiCheckKomoku,
                        ShokenDojiCheckHandan,
                        ShokenFollowFlg,
                        ShokenTaishoKensaBitMask,
                        InsertDt,
                        InsertUser,
                        InsertTarm,
                        UpdateDt,
                        UpdateUser,
                        UpdateTarm};
                rowShokenMstRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowShokenMstRow);
                return rowShokenMstRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstRow FindByShokenKbnShokenCd(string ShokenKbn, string ShokenCd) {
                return ((ShokenMstRow)(this.Rows.Find(new object[] {
                            ShokenKbn,
                            ShokenCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ShokenMstDataTable cln = ((ShokenMstDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ShokenMstDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnShokenKbn = base.Columns["ShokenKbn"];
                this.columnShokenCd = base.Columns["ShokenCd"];
                this.columnShokenJuyodo = base.Columns["ShokenJuyodo"];
                this.columnShokenHyokiJun = base.Columns["ShokenHyokiJun"];
                this.columnShokenHandan = base.Columns["ShokenHandan"];
                this.columnShokenWd = base.Columns["ShokenWd"];
                this.columnShokenWdRyaku = base.Columns["ShokenWdRyaku"];
                this.columnShokenHantei = base.Columns["ShokenHantei"];
                this.columnShokenBiko = base.Columns["ShokenBiko"];
                this.columnShokenHokokuLevel = base.Columns["ShokenHokokuLevel"];
                this.columnShokenShitekiKbn = base.Columns["ShokenShitekiKbn"];
                this.columnShokenShitekiNo = base.Columns["ShokenShitekiNo"];
                this.columnShokenDojiCheckKomoku = base.Columns["ShokenDojiCheckKomoku"];
                this.columnShokenDojiCheckHandan = base.Columns["ShokenDojiCheckHandan"];
                this.columnShokenFollowFlg = base.Columns["ShokenFollowFlg"];
                this.columnShokenTaishoKensaBitMask = base.Columns["ShokenTaishoKensaBitMask"];
                this.columnInsertDt = base.Columns["InsertDt"];
                this.columnInsertUser = base.Columns["InsertUser"];
                this.columnInsertTarm = base.Columns["InsertTarm"];
                this.columnUpdateDt = base.Columns["UpdateDt"];
                this.columnUpdateUser = base.Columns["UpdateUser"];
                this.columnUpdateTarm = base.Columns["UpdateTarm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnShokenKbn = new global::System.Data.DataColumn("ShokenKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenKbn);
                this.columnShokenCd = new global::System.Data.DataColumn("ShokenCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenCd);
                this.columnShokenJuyodo = new global::System.Data.DataColumn("ShokenJuyodo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenJuyodo);
                this.columnShokenHyokiJun = new global::System.Data.DataColumn("ShokenHyokiJun", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHyokiJun);
                this.columnShokenHandan = new global::System.Data.DataColumn("ShokenHandan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHandan);
                this.columnShokenWd = new global::System.Data.DataColumn("ShokenWd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWd);
                this.columnShokenWdRyaku = new global::System.Data.DataColumn("ShokenWdRyaku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenWdRyaku);
                this.columnShokenHantei = new global::System.Data.DataColumn("ShokenHantei", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHantei);
                this.columnShokenBiko = new global::System.Data.DataColumn("ShokenBiko", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenBiko);
                this.columnShokenHokokuLevel = new global::System.Data.DataColumn("ShokenHokokuLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenHokokuLevel);
                this.columnShokenShitekiKbn = new global::System.Data.DataColumn("ShokenShitekiKbn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiKbn);
                this.columnShokenShitekiNo = new global::System.Data.DataColumn("ShokenShitekiNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenShitekiNo);
                this.columnShokenDojiCheckKomoku = new global::System.Data.DataColumn("ShokenDojiCheckKomoku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenDojiCheckKomoku);
                this.columnShokenDojiCheckHandan = new global::System.Data.DataColumn("ShokenDojiCheckHandan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenDojiCheckHandan);
                this.columnShokenFollowFlg = new global::System.Data.DataColumn("ShokenFollowFlg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenFollowFlg);
                this.columnShokenTaishoKensaBitMask = new global::System.Data.DataColumn("ShokenTaishoKensaBitMask", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShokenTaishoKensaBitMask);
                this.columnInsertDt = new global::System.Data.DataColumn("InsertDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertDt);
                this.columnInsertUser = new global::System.Data.DataColumn("InsertUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertUser);
                this.columnInsertTarm = new global::System.Data.DataColumn("InsertTarm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertTarm);
                this.columnUpdateDt = new global::System.Data.DataColumn("UpdateDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDt);
                this.columnUpdateUser = new global::System.Data.DataColumn("UpdateUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateUser);
                this.columnUpdateTarm = new global::System.Data.DataColumn("UpdateTarm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateTarm);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnShokenKbn,
                                this.columnShokenCd}, true));
                this.columnShokenKbn.AllowDBNull = false;
                this.columnShokenKbn.MaxLength = 3;
                this.columnShokenCd.AllowDBNull = false;
                this.columnShokenCd.MaxLength = 3;
                this.columnShokenJuyodo.AllowDBNull = false;
                this.columnShokenJuyodo.MaxLength = 1;
                this.columnShokenHyokiJun.AllowDBNull = false;
                this.columnShokenHyokiJun.MaxLength = 1;
                this.columnShokenHandan.AllowDBNull = false;
                this.columnShokenHandan.MaxLength = 1;
                this.columnShokenWd.AllowDBNull = false;
                this.columnShokenWd.MaxLength = 160;
                this.columnShokenWdRyaku.AllowDBNull = false;
                this.columnShokenWdRyaku.MaxLength = 80;
                this.columnShokenHantei.AllowDBNull = false;
                this.columnShokenHantei.MaxLength = 1;
                this.columnShokenBiko.AllowDBNull = false;
                this.columnShokenBiko.MaxLength = 250;
                this.columnShokenHokokuLevel.AllowDBNull = false;
                this.columnShokenHokokuLevel.MaxLength = 1;
                this.columnShokenShitekiKbn.AllowDBNull = false;
                this.columnShokenShitekiKbn.MaxLength = 1;
                this.columnShokenShitekiNo.AllowDBNull = false;
                this.columnShokenShitekiNo.MaxLength = 2;
                this.columnShokenDojiCheckKomoku.AllowDBNull = false;
                this.columnShokenDojiCheckKomoku.MaxLength = 3;
                this.columnShokenDojiCheckHandan.AllowDBNull = false;
                this.columnShokenDojiCheckHandan.MaxLength = 1;
                this.columnShokenFollowFlg.AllowDBNull = false;
                this.columnShokenFollowFlg.MaxLength = 1;
                this.columnShokenTaishoKensaBitMask.AllowDBNull = false;
                this.columnInsertDt.AllowDBNull = false;
                this.columnInsertUser.AllowDBNull = false;
                this.columnInsertUser.MaxLength = 20;
                this.columnInsertTarm.AllowDBNull = false;
                this.columnInsertTarm.MaxLength = 20;
                this.columnUpdateDt.AllowDBNull = false;
                this.columnUpdateUser.AllowDBNull = false;
                this.columnUpdateUser.MaxLength = 20;
                this.columnUpdateTarm.AllowDBNull = false;
                this.columnUpdateTarm.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstRow NewShokenMstRow() {
                return ((ShokenMstRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ShokenMstRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ShokenMstRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShokenMstRowChanged != null)) {
                    this.ShokenMstRowChanged(this, new ShokenMstRowChangeEvent(((ShokenMstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShokenMstRowChanging != null)) {
                    this.ShokenMstRowChanging(this, new ShokenMstRowChangeEvent(((ShokenMstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShokenMstRowDeleted != null)) {
                    this.ShokenMstRowDeleted(this, new ShokenMstRowChangeEvent(((ShokenMstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShokenMstRowDeleting != null)) {
                    this.ShokenMstRowDeleting(this, new ShokenMstRowChangeEvent(((ShokenMstRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveShokenMstRow(ShokenMstRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ShokenMstDataSet ds = new ShokenMstDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShokenMstDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ShokenMstKensakuRow : global::System.Data.DataRow {
            
            private ShokenMstKensakuDataTable tableShokenMstKensaku;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenMstKensakuRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShokenMstKensaku = ((ShokenMstKensakuDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenKbn {
                get {
                    if (this.IsShokenKbnNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenKbnColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenCd {
                get {
                    if (this.IsShokenCdNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenCdColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenJuyodo {
                get {
                    if (this.IsShokenJuyodoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenJuyodoColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenJuyodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHandan {
                get {
                    if (this.IsShokenHandanNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenHandanColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenHandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWd {
                get {
                    if (this.IsShokenWdNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenWdColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenWdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHantei {
                get {
                    if (this.IsShokenHanteiNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenHanteiColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenHanteiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenBiko {
                get {
                    if (this.IsShokenBikoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenBikoColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenBikoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHokokuLevel {
                get {
                    if (this.IsShokenHokokuLevelNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenHokokuLevelColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenHokokuLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiKbn {
                get {
                    if (this.IsShokenShitekiKbnNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenShitekiKbnColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenShitekiKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiNo {
                get {
                    if (this.IsShokenShitekiNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenShitekiNoColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenShitekiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenDojiCheckKomoku {
                get {
                    if (this.IsShokenDojiCheckKomokuNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenDojiCheckKomokuColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenDojiCheckKomokuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWdRyaku {
                get {
                    if (this.IsShokenWdRyakuNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenWdRyakuColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenWdRyakuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenFollowFlg {
                get {
                    if (this.IsShokenFollowFlgNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenMstKensaku.ShokenFollowFlgColumn]));
                    }
                }
                set {
                    this[this.tableShokenMstKensaku.ShokenFollowFlgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenKbnNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenKbnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenKbnNull() {
                this[this.tableShokenMstKensaku.ShokenKbnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenCdNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenCdNull() {
                this[this.tableShokenMstKensaku.ShokenCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenJuyodoNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenJuyodoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenJuyodoNull() {
                this[this.tableShokenMstKensaku.ShokenJuyodoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenHandanNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenHandanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenHandanNull() {
                this[this.tableShokenMstKensaku.ShokenHandanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenWdNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenWdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenWdNull() {
                this[this.tableShokenMstKensaku.ShokenWdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenHanteiNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenHanteiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenHanteiNull() {
                this[this.tableShokenMstKensaku.ShokenHanteiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenBikoNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenBikoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenBikoNull() {
                this[this.tableShokenMstKensaku.ShokenBikoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenHokokuLevelNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenHokokuLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenHokokuLevelNull() {
                this[this.tableShokenMstKensaku.ShokenHokokuLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenShitekiKbnNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenShitekiKbnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenShitekiKbnNull() {
                this[this.tableShokenMstKensaku.ShokenShitekiKbnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenShitekiNoNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenShitekiNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenShitekiNoNull() {
                this[this.tableShokenMstKensaku.ShokenShitekiNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenDojiCheckKomokuNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenDojiCheckKomokuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenDojiCheckKomokuNull() {
                this[this.tableShokenMstKensaku.ShokenDojiCheckKomokuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenWdRyakuNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenWdRyakuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenWdRyakuNull() {
                this[this.tableShokenMstKensaku.ShokenWdRyakuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenFollowFlgNull() {
                return this.IsNull(this.tableShokenMstKensaku.ShokenFollowFlgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenFollowFlgNull() {
                this[this.tableShokenMstKensaku.ShokenFollowFlgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SyokenMstSearchListRow : global::System.Data.DataRow {
            
            private SyokenMstSearchListDataTable tableSyokenMstSearchList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SyokenMstSearchListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSyokenMstSearchList = ((SyokenMstSearchListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenKbn {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenKbnColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenCd {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenCdColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWd {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenWdColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenWdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenJuyodo {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenJuyodoColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenJuyodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHandan {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenHandanColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenHandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHantei {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenHanteiColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenHanteiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenBiko {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenBikoColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenBikoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string juyodoCol {
                get {
                    try {
                        return ((string)(this[this.tableSyokenMstSearchList.juyodoColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SyokenMstSearchList\' にある列 \'juyodoCol\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSyokenMstSearchList.juyodoColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string handanCol {
                get {
                    try {
                        return ((string)(this[this.tableSyokenMstSearchList.handanColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SyokenMstSearchList\' にある列 \'handanCol\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSyokenMstSearchList.handanColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string hanteiCol {
                get {
                    try {
                        return ((string)(this[this.tableSyokenMstSearchList.hanteiColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SyokenMstSearchList\' にある列 \'hanteiCol\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSyokenMstSearchList.hanteiColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiKbn {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenShitekiKbnColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenShitekiKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiNo {
                get {
                    return ((string)(this[this.tableSyokenMstSearchList.ShokenShitekiNoColumn]));
                }
                set {
                    this[this.tableSyokenMstSearchList.ShokenShitekiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsjuyodoColNull() {
                return this.IsNull(this.tableSyokenMstSearchList.juyodoColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetjuyodoColNull() {
                this[this.tableSyokenMstSearchList.juyodoColColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IshandanColNull() {
                return this.IsNull(this.tableSyokenMstSearchList.handanColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SethandanColNull() {
                this[this.tableSyokenMstSearchList.handanColColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IshanteiColNull() {
                return this.IsNull(this.tableSyokenMstSearchList.hanteiColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SethanteiColNull() {
                this[this.tableSyokenMstSearchList.hanteiColColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ShokenCheckItemRow : global::System.Data.DataRow {
            
            private ShokenCheckItemDataTable tableShokenCheckItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenCheckItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShokenCheckItem = ((ShokenCheckItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Code {
                get {
                    if (this.IsCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenCheckItem.CodeColumn]));
                    }
                }
                set {
                    this[this.tableShokenCheckItem.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    if (this.IsNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenCheckItem.NameColumn]));
                    }
                }
                set {
                    this[this.tableShokenCheckItem.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCodeNull() {
                return this.IsNull(this.tableShokenCheckItem.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCodeNull() {
                this[this.tableShokenCheckItem.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableShokenCheckItem.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableShokenCheckItem.NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ShokenKekkaSelectRow : global::System.Data.DataRow {
            
            private ShokenKekkaSelectDataTable tableShokenKekkaSelect;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenKekkaSelectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShokenKekkaSelect = ((ShokenKekkaSelectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenKbn {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenKbnColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenCd {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenCdColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWd {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenWdColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenWdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Juyodo {
                get {
                    if (this.IsJuyodoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenKekkaSelect.JuyodoColumn]));
                    }
                }
                set {
                    this[this.tableShokenKekkaSelect.JuyodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Handan {
                get {
                    if (this.IsHandanNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenKekkaSelect.HandanColumn]));
                    }
                }
                set {
                    this[this.tableShokenKekkaSelect.HandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Hantei {
                get {
                    if (this.IsHanteiNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenKekkaSelect.HanteiColumn]));
                    }
                }
                set {
                    this[this.tableShokenKekkaSelect.HanteiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenBiko {
                get {
                    if (this.IsShokenBikoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableShokenKekkaSelect.ShokenBikoColumn]));
                    }
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenBikoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenJuyodo {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenJuyodoColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenJuyodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHandan {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenHandanColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenHandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHantei {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenHanteiColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenHanteiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHyokiJun {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenHyokiJunColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenHyokiJunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWdRyaku {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenWdRyakuColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenWdRyakuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHokokuLevel {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenHokokuLevelColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenHokokuLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiKbn {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenShitekiKbnColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenShitekiKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiNo {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenShitekiNoColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenShitekiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenDojiCheckKomoku {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenDojiCheckKomokuColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenDojiCheckKomokuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenDojiCheckHandan {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenDojiCheckHandanColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenDojiCheckHandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenFollowFlg {
                get {
                    return ((string)(this[this.tableShokenKekkaSelect.ShokenFollowFlgColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenFollowFlgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ShokenTaishoKensaBitMask {
                get {
                    return ((int)(this[this.tableShokenKekkaSelect.ShokenTaishoKensaBitMaskColumn]));
                }
                set {
                    this[this.tableShokenKekkaSelect.ShokenTaishoKensaBitMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsJuyodoNull() {
                return this.IsNull(this.tableShokenKekkaSelect.JuyodoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetJuyodoNull() {
                this[this.tableShokenKekkaSelect.JuyodoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHandanNull() {
                return this.IsNull(this.tableShokenKekkaSelect.HandanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHandanNull() {
                this[this.tableShokenKekkaSelect.HandanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHanteiNull() {
                return this.IsNull(this.tableShokenKekkaSelect.HanteiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHanteiNull() {
                this[this.tableShokenKekkaSelect.HanteiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShokenBikoNull() {
                return this.IsNull(this.tableShokenKekkaSelect.ShokenBikoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShokenBikoNull() {
                this[this.tableShokenKekkaSelect.ShokenBikoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ShokenMstRow : global::System.Data.DataRow {
            
            private ShokenMstDataTable tableShokenMst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShokenMstRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShokenMst = ((ShokenMstDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenKbn {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenKbnColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenCd {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenCdColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenJuyodo {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenJuyodoColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenJuyodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHyokiJun {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenHyokiJunColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenHyokiJunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHandan {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenHandanColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenHandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWd {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenWdColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenWdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenWdRyaku {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenWdRyakuColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenWdRyakuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHantei {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenHanteiColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenHanteiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenBiko {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenBikoColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenBikoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenHokokuLevel {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenHokokuLevelColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenHokokuLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiKbn {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenShitekiKbnColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenShitekiKbnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenShitekiNo {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenShitekiNoColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenShitekiNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenDojiCheckKomoku {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenDojiCheckKomokuColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenDojiCheckKomokuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenDojiCheckHandan {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenDojiCheckHandanColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenDojiCheckHandanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShokenFollowFlg {
                get {
                    return ((string)(this[this.tableShokenMst.ShokenFollowFlgColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenFollowFlgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ShokenTaishoKensaBitMask {
                get {
                    return ((int)(this[this.tableShokenMst.ShokenTaishoKensaBitMaskColumn]));
                }
                set {
                    this[this.tableShokenMst.ShokenTaishoKensaBitMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime InsertDt {
                get {
                    return ((global::System.DateTime)(this[this.tableShokenMst.InsertDtColumn]));
                }
                set {
                    this[this.tableShokenMst.InsertDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InsertUser {
                get {
                    return ((string)(this[this.tableShokenMst.InsertUserColumn]));
                }
                set {
                    this[this.tableShokenMst.InsertUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InsertTarm {
                get {
                    return ((string)(this[this.tableShokenMst.InsertTarmColumn]));
                }
                set {
                    this[this.tableShokenMst.InsertTarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime UpdateDt {
                get {
                    return ((global::System.DateTime)(this[this.tableShokenMst.UpdateDtColumn]));
                }
                set {
                    this[this.tableShokenMst.UpdateDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UpdateUser {
                get {
                    return ((string)(this[this.tableShokenMst.UpdateUserColumn]));
                }
                set {
                    this[this.tableShokenMst.UpdateUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UpdateTarm {
                get {
                    return ((string)(this[this.tableShokenMst.UpdateTarmColumn]));
                }
                set {
                    this[this.tableShokenMst.UpdateTarmColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ShokenMstKensakuRowChangeEvent : global::System.EventArgs {
            
            private ShokenMstKensakuRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstKensakuRowChangeEvent(ShokenMstKensakuRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstKensakuRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SyokenMstSearchListRowChangeEvent : global::System.EventArgs {
            
            private SyokenMstSearchListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListRowChangeEvent(SyokenMstSearchListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SyokenMstSearchListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ShokenCheckItemRowChangeEvent : global::System.EventArgs {
            
            private ShokenCheckItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenCheckItemRowChangeEvent(ShokenCheckItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenCheckItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ShokenKekkaSelectRowChangeEvent : global::System.EventArgs {
            
            private ShokenKekkaSelectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectRowChangeEvent(ShokenKekkaSelectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenKekkaSelectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ShokenMstRowChangeEvent : global::System.EventArgs {
            
            private ShokenMstRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstRowChangeEvent(ShokenMstRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShokenMstRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FukjBizSystem.Application.DataSet.ShokenMstDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ShokenMstKensakuTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ShokenMstKensakuTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ShokenMstKensaku";
            tableMapping.ColumnMappings.Add("ShokenKbn", "ShokenKbn");
            tableMapping.ColumnMappings.Add("ShokenCd", "ShokenCd");
            tableMapping.ColumnMappings.Add("ShokenJuyodo", "ShokenJuyodo");
            tableMapping.ColumnMappings.Add("ShokenHandan", "ShokenHandan");
            tableMapping.ColumnMappings.Add("ShokenWd", "ShokenWd");
            tableMapping.ColumnMappings.Add("ShokenHantei", "ShokenHantei");
            tableMapping.ColumnMappings.Add("ShokenBiko", "ShokenBiko");
            tableMapping.ColumnMappings.Add("ShokenHokokuLevel", "ShokenHokokuLevel");
            tableMapping.ColumnMappings.Add("ShokenShitekiKbn", "ShokenShitekiKbn");
            tableMapping.ColumnMappings.Add("ShokenShitekiNo", "ShokenShitekiNo");
            tableMapping.ColumnMappings.Add("ShokenDojiCheckKomoku", "ShokenDojiCheckKomoku");
            tableMapping.ColumnMappings.Add("ShokenWdRyaku", "ShokenWdRyaku");
            tableMapping.ColumnMappings.Add("ShokenFollowFlg", "ShokenFollowFlg");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ShokenMst] WHERE (([ShokenKbn] = @Original_ShokenKbn) AND ([ShokenCd] = @Original_ShokenCd) AND ([ShokenJuyodo] = @Original_ShokenJuyodo) AND ([ShokenHandan] = @Original_ShokenHandan) AND ([ShokenWd] = @Original_ShokenWd) AND ([ShokenWdRyaku] = @Original_ShokenWdRyaku) AND ([ShokenFollowFlg] = @Original_ShokenFollowFlg) AND ([ShokenHantei] = @Original_ShokenHantei) AND ([ShokenBiko] = @Original_ShokenBiko) AND ([ShokenHokokuLevel] = @Original_ShokenHokokuLevel) AND ([ShokenShitekiKbn] = @Original_ShokenShitekiKbn) AND ([ShokenShitekiNo] = @Original_ShokenShitekiNo) AND ([ShokenDojiCheckKomoku] = @Original_ShokenDojiCheckKomoku))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ShokenMst] ([ShokenKbn], [ShokenCd], [ShokenJuyodo], [ShokenHandan], [ShokenWd], [ShokenWdRyaku], [ShokenFollowFlg], [ShokenHantei], [ShokenBiko], [ShokenHokokuLevel], [ShokenShitekiKbn], [ShokenShitekiNo], [ShokenDojiCheckKomoku]) VALUES (@ShokenKbn, @ShokenCd, @ShokenJuyodo, @ShokenHandan, @ShokenWd, @ShokenWdRyaku, @ShokenFollowFlg, @ShokenHantei, @ShokenBiko, @ShokenHokokuLevel, @ShokenShitekiKbn, @ShokenShitekiNo, @ShokenDojiCheckKomoku);
SELECT ShokenKbn, ShokenCd, ShokenJuyodo, ShokenHandan, ShokenWd, ShokenWdRyaku, ShokenFollowFlg, ShokenHantei, ShokenBiko, ShokenHokokuLevel, ShokenShitekiKbn, ShokenShitekiNo, ShokenDojiCheckKomoku FROM ShokenMst WHERE (ShokenCd = @ShokenCd) AND (ShokenKbn = @ShokenKbn)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ShokenMst] SET [ShokenKbn] = @ShokenKbn, [ShokenCd] = @ShokenCd, [ShokenJuyodo] = @ShokenJuyodo, [ShokenHandan] = @ShokenHandan, [ShokenWd] = @ShokenWd, [ShokenWdRyaku] = @ShokenWdRyaku, [ShokenFollowFlg] = @ShokenFollowFlg, [ShokenHantei] = @ShokenHantei, [ShokenBiko] = @ShokenBiko, [ShokenHokokuLevel] = @ShokenHokokuLevel, [ShokenShitekiKbn] = @ShokenShitekiKbn, [ShokenShitekiNo] = @ShokenShitekiNo, [ShokenDojiCheckKomoku] = @ShokenDojiCheckKomoku WHERE (([ShokenKbn] = @Original_ShokenKbn) AND ([ShokenCd] = @Original_ShokenCd) AND ([ShokenJuyodo] = @Original_ShokenJuyodo) AND ([ShokenHandan] = @Original_ShokenHandan) AND ([ShokenWd] = @Original_ShokenWd) AND ([ShokenWdRyaku] = @Original_ShokenWdRyaku) AND ([ShokenFollowFlg] = @Original_ShokenFollowFlg) AND ([ShokenHantei] = @Original_ShokenHantei) AND ([ShokenBiko] = @Original_ShokenBiko) AND ([ShokenHokokuLevel] = @Original_ShokenHokokuLevel) AND ([ShokenShitekiKbn] = @Original_ShokenShitekiKbn) AND ([ShokenShitekiNo] = @Original_ShokenShitekiNo) AND ([ShokenDojiCheckKomoku] = @Original_ShokenDojiCheckKomoku));
SELECT ShokenKbn, ShokenCd, ShokenJuyodo, ShokenHandan, ShokenWd, ShokenWdRyaku, ShokenFollowFlg, ShokenHantei, ShokenBiko, ShokenHokokuLevel, ShokenShitekiKbn, ShokenShitekiNo, ShokenDojiCheckKomoku FROM ShokenMst WHERE (ShokenCd = @ShokenCd) AND (ShokenKbn = @ShokenKbn)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FukjBizSystem.Properties.Settings.Default.FukjBizSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT
  ShokenKbn
  , ShokenCd
  , ShokenJuyodo
  , ShokenHandan
  , ShokenWd
  , ShokenWdRyaku
  , ShokenFollowFlg
  , ShokenHantei
  , ShokenBiko
  , ShokenHokokuLevel
  , ShokenShitekiKbn
  , ShokenShitekiNo
  , ShokenDojiCheckKomoku 
FROM
  ShokenMst
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ShokenMstDataSet.ShokenMstKensakuDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ShokenMstDataSet.ShokenMstKensakuDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ShokenMstDataSet.ShokenMstKensakuDataTable dataTable = new ShokenMstDataSet.ShokenMstKensakuDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ShokenMstDataSet.ShokenMstKensakuDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ShokenMstDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ShokenMstKensaku");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_ShokenKbn, string Original_ShokenCd, string Original_ShokenJuyodo, string Original_ShokenHandan, string Original_ShokenWd, string Original_ShokenWdRyaku, string Original_ShokenFollowFlg, string Original_ShokenHantei, string Original_ShokenBiko, string Original_ShokenHokokuLevel, string Original_ShokenShitekiKbn, string Original_ShokenShitekiNo, string Original_ShokenDojiCheckKomoku) {
            if ((Original_ShokenKbn == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ShokenKbn));
            }
            if ((Original_ShokenCd == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ShokenCd));
            }
            if ((Original_ShokenJuyodo == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ShokenJuyodo));
            }
            if ((Original_ShokenHandan == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ShokenHandan));
            }
            if ((Original_ShokenWd == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ShokenWd));
            }
            if ((Original_ShokenWdRyaku == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ShokenWdRyaku));
            }
            if ((Original_ShokenFollowFlg == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ShokenFollowFlg));
            }
            if ((Original_ShokenHantei == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ShokenHantei));
            }
            if ((Original_ShokenBiko == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ShokenBiko));
            }
            if ((Original_ShokenHokokuLevel == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ShokenHokokuLevel));
            }
            if ((Original_ShokenShitekiKbn == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ShokenShitekiKbn));
            }
            if ((Original_ShokenShitekiNo == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ShokenShitekiNo));
            }
            if ((Original_ShokenDojiCheckKomoku == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ShokenDojiCheckKomoku));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ShokenKbn, string ShokenCd, string ShokenJuyodo, string ShokenHandan, string ShokenWd, string ShokenWdRyaku, string ShokenFollowFlg, string ShokenHantei, string ShokenBiko, string ShokenHokokuLevel, string ShokenShitekiKbn, string ShokenShitekiNo, string ShokenDojiCheckKomoku) {
            if ((ShokenKbn == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ShokenKbn));
            }
            if ((ShokenCd == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ShokenCd));
            }
            if ((ShokenJuyodo == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ShokenJuyodo));
            }
            if ((ShokenHandan == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ShokenHandan));
            }
            if ((ShokenWd == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ShokenWd));
            }
            if ((ShokenWdRyaku == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ShokenWdRyaku));
            }
            if ((ShokenFollowFlg == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ShokenFollowFlg));
            }
            if ((ShokenHantei == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ShokenHantei));
            }
            if ((ShokenBiko == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ShokenBiko));
            }
            if ((ShokenHokokuLevel == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ShokenHokokuLevel));
            }
            if ((ShokenShitekiKbn == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ShokenShitekiKbn));
            }
            if ((ShokenShitekiNo == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ShokenShitekiNo));
            }
            if ((ShokenDojiCheckKomoku == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ShokenDojiCheckKomoku));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ShokenKbn, 
                    string ShokenCd, 
                    string ShokenJuyodo, 
                    string ShokenHandan, 
                    string ShokenWd, 
                    string ShokenWdRyaku, 
                    string ShokenFollowFlg, 
                    string ShokenHantei, 
                    string ShokenBiko, 
                    string ShokenHokokuLevel, 
                    string ShokenShitekiKbn, 
                    string ShokenShitekiNo, 
                    string ShokenDojiCheckKomoku, 
                    string Original_ShokenKbn, 
                    string Original_ShokenCd, 
                    string Original_ShokenJuyodo, 
                    string Original_ShokenHandan, 
                    string Original_ShokenWd, 
                    string Original_ShokenWdRyaku, 
                    string Original_ShokenFollowFlg, 
                    string Original_ShokenHantei, 
                    string Original_ShokenBiko, 
                    string Original_ShokenHokokuLevel, 
                    string Original_ShokenShitekiKbn, 
                    string Original_ShokenShitekiNo, 
                    string Original_ShokenDojiCheckKomoku) {
            if ((ShokenKbn == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ShokenKbn));
            }
            if ((ShokenCd == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ShokenCd));
            }
            if ((ShokenJuyodo == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ShokenJuyodo));
            }
            if ((ShokenHandan == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ShokenHandan));
            }
            if ((ShokenWd == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ShokenWd));
            }
            if ((ShokenWdRyaku == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ShokenWdRyaku));
            }
            if ((ShokenFollowFlg == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ShokenFollowFlg));
            }
            if ((ShokenHantei == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ShokenHantei));
            }
            if ((ShokenBiko == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ShokenBiko));
            }
            if ((ShokenHokokuLevel == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ShokenHokokuLevel));
            }
            if ((ShokenShitekiKbn == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ShokenShitekiKbn));
            }
            if ((ShokenShitekiNo == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ShokenShitekiNo));
            }
            if ((ShokenDojiCheckKomoku == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ShokenDojiCheckKomoku));
            }
            if ((Original_ShokenKbn == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ShokenKbn));
            }
            if ((Original_ShokenCd == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_ShokenCd));
            }
            if ((Original_ShokenJuyodo == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ShokenJuyodo));
            }
            if ((Original_ShokenHandan == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ShokenHandan));
            }
            if ((Original_ShokenWd == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_ShokenWd));
            }
            if ((Original_ShokenWdRyaku == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_ShokenWdRyaku));
            }
            if ((Original_ShokenFollowFlg == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ShokenFollowFlg));
            }
            if ((Original_ShokenHantei == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_ShokenHantei));
            }
            if ((Original_ShokenBiko == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_ShokenBiko));
            }
            if ((Original_ShokenHokokuLevel == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_ShokenHokokuLevel));
            }
            if ((Original_ShokenShitekiKbn == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_ShokenShitekiKbn));
            }
            if ((Original_ShokenShitekiNo == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ShokenShitekiNo));
            }
            if ((Original_ShokenDojiCheckKomoku == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_ShokenDojiCheckKomoku));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SyokenMstSearchListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SyokenMstSearchListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SyokenMstSearchList";
            tableMapping.ColumnMappings.Add("ShokenKbn", "ShokenKbn");
            tableMapping.ColumnMappings.Add("ShokenCd", "ShokenCd");
            tableMapping.ColumnMappings.Add("ShokenWd", "ShokenWd");
            tableMapping.ColumnMappings.Add("ShokenJuyodo", "ShokenJuyodo");
            tableMapping.ColumnMappings.Add("ShokenHandan", "ShokenHandan");
            tableMapping.ColumnMappings.Add("ShokenHantei", "ShokenHantei");
            tableMapping.ColumnMappings.Add("ShokenBiko", "ShokenBiko");
            tableMapping.ColumnMappings.Add("juyodoCol", "juyodoCol");
            tableMapping.ColumnMappings.Add("handanCol", "handanCol");
            tableMapping.ColumnMappings.Add("hanteiCol", "hanteiCol");
            tableMapping.ColumnMappings.Add("ShokenShitekiKbn", "ShokenShitekiKbn");
            tableMapping.ColumnMappings.Add("ShokenShitekiNo", "ShokenShitekiNo");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FukjBizSystem.Properties.Settings.Default.FukjBizSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT                      ShokenMst.ShokenKbn, ShokenMst.ShokenCd, ShokenMst.ShokenWd, ShokenMst.ShokenJuyodo, ShokenMst.ShokenHandan, 
                                      ShokenMst.ShokenHantei, ShokenMst.ShokenBiko, ShokenMst.ShokenShitekiKbn, const1.ConstNm AS juyodoCol, const2.ConstNm AS handanCol, 
                                      const3.ConstNm AS hanteiCol, ShokenMst.ShokenShitekiNo
FROM                         ShokenMst LEFT OUTER JOIN
                                      ConstMst AS const1 ON const1.ConstKbn = '012' AND const1.ConstValue = ShokenMst.ShokenJuyodo LEFT OUTER JOIN
                                      ConstMst AS const2 ON const2.ConstKbn = '025' AND const2.ConstValue = ShokenMst.ShokenHandan LEFT OUTER JOIN
                                      ConstMst AS const3 ON const3.ConstKbn = '016' AND const3.ConstValue = ShokenMst.ShokenHantei";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ShokenMstDataSet.SyokenMstSearchListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ShokenMstDataSet.SyokenMstSearchListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ShokenMstDataSet.SyokenMstSearchListDataTable dataTable = new ShokenMstDataSet.SyokenMstSearchListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ShokenCheckItemTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ShokenCheckItemTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ShokenCheckItem";
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FukjBizSystem.Properties.Settings.Default.FukjBizSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select distinct
	skm.SuishitsuShikenKoumokuCd as Code,
	skm.SeishikiNm as Name
from ShokenMst sm
left outer join SuishitsuShikenKoumokuMst skm
	on sm.ShokenKbn = skm.SuishitsuShikenKoumokuCd
where
	sm.ShokenShitekiKbn = @ShokenShitekiKbn
order by
	skm.SuishitsuShikenKoumokuCd";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ShokenMstDataSet.ShokenCheckItemDataTable dataTable, string ShokenShitekiKbn) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ShokenShitekiKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenShitekiKbn");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ShokenShitekiKbn));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ShokenMstDataSet.ShokenCheckItemDataTable GetData(string ShokenShitekiKbn) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ShokenShitekiKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenShitekiKbn");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ShokenShitekiKbn));
            }
            ShokenMstDataSet.ShokenCheckItemDataTable dataTable = new ShokenMstDataSet.ShokenCheckItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ShokenKekkaSelectTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ShokenKekkaSelectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ShokenKekkaSelect";
            tableMapping.ColumnMappings.Add("ShokenKbn", "ShokenKbn");
            tableMapping.ColumnMappings.Add("ShokenCd", "ShokenCd");
            tableMapping.ColumnMappings.Add("ShokenWd", "ShokenWd");
            tableMapping.ColumnMappings.Add("Juyodo", "Juyodo");
            tableMapping.ColumnMappings.Add("Handan", "Handan");
            tableMapping.ColumnMappings.Add("Hantei", "Hantei");
            tableMapping.ColumnMappings.Add("ShokenBiko", "ShokenBiko");
            tableMapping.ColumnMappings.Add("ShokenJuyodo", "ShokenJuyodo");
            tableMapping.ColumnMappings.Add("ShokenHandan", "ShokenHandan");
            tableMapping.ColumnMappings.Add("ShokenHantei", "ShokenHantei");
            tableMapping.ColumnMappings.Add("ShokenHyokiJun", "ShokenHyokiJun");
            tableMapping.ColumnMappings.Add("ShokenWdRyaku", "ShokenWdRyaku");
            tableMapping.ColumnMappings.Add("ShokenHokokuLevel", "ShokenHokokuLevel");
            tableMapping.ColumnMappings.Add("ShokenShitekiKbn", "ShokenShitekiKbn");
            tableMapping.ColumnMappings.Add("ShokenShitekiNo", "ShokenShitekiNo");
            tableMapping.ColumnMappings.Add("ShokenDojiCheckKomoku", "ShokenDojiCheckKomoku");
            tableMapping.ColumnMappings.Add("ShokenDojiCheckHandan", "ShokenDojiCheckHandan");
            tableMapping.ColumnMappings.Add("ShokenFollowFlg", "ShokenFollowFlg");
            tableMapping.ColumnMappings.Add("ShokenTaishoKensaBitMask", "ShokenTaishoKensaBitMask");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FukjBizSystem.Properties.Settings.Default.FukjBizSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select
	sm.ShokenKbn,
	sm.ShokenCd,
	sm.ShokenWd,
	cm1.ConstNm as Juyodo,
	cm2.ConstNm as Handan,
	cm3.ConstNm as Hantei,
	case
		when isnull(sm.ShokenBiko, '') <> '' then '有'
		else ''
	end as ShokenBiko
	, sm.ShokenJuyodo
	, sm.ShokenHandan
	, sm.ShokenHantei
	, sm.ShokenHyokiJun
	, sm.ShokenWdRyaku
	, sm.ShokenHokokuLevel
	, sm.ShokenShitekiKbn
	, sm.ShokenShitekiNo
	, sm.ShokenDojiCheckKomoku
	, sm.ShokenDojiCheckHandan
	, sm.ShokenFollowFlg
	, sm.ShokenTaishoKensaBitMask
from ShokenMst sm
left outer join ConstMst cm1
	on sm.ShokenJuyodo = cm1.ConstValue
	and cm1.ConstKbn = '012'
left outer join ConstMst cm2
	on sm.ShokenHandan = cm2.ConstValue
	and cm2.ConstKbn = '025'
left outer join ConstMst cm3
	on sm.ShokenHantei = cm3.ConstValue
	and cm3.ConstKbn = '016'
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ShokenMstDataSet.ShokenKekkaSelectDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ShokenMstDataSet.ShokenKekkaSelectDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ShokenMstDataSet.ShokenKekkaSelectDataTable dataTable = new ShokenMstDataSet.ShokenKekkaSelectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ShokenMstTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ShokenMstTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ShokenMst";
            tableMapping.ColumnMappings.Add("ShokenKbn", "ShokenKbn");
            tableMapping.ColumnMappings.Add("ShokenCd", "ShokenCd");
            tableMapping.ColumnMappings.Add("ShokenJuyodo", "ShokenJuyodo");
            tableMapping.ColumnMappings.Add("ShokenHyokiJun", "ShokenHyokiJun");
            tableMapping.ColumnMappings.Add("ShokenHandan", "ShokenHandan");
            tableMapping.ColumnMappings.Add("ShokenWd", "ShokenWd");
            tableMapping.ColumnMappings.Add("ShokenWdRyaku", "ShokenWdRyaku");
            tableMapping.ColumnMappings.Add("ShokenHantei", "ShokenHantei");
            tableMapping.ColumnMappings.Add("ShokenBiko", "ShokenBiko");
            tableMapping.ColumnMappings.Add("ShokenHokokuLevel", "ShokenHokokuLevel");
            tableMapping.ColumnMappings.Add("ShokenShitekiKbn", "ShokenShitekiKbn");
            tableMapping.ColumnMappings.Add("ShokenShitekiNo", "ShokenShitekiNo");
            tableMapping.ColumnMappings.Add("ShokenDojiCheckKomoku", "ShokenDojiCheckKomoku");
            tableMapping.ColumnMappings.Add("ShokenDojiCheckHandan", "ShokenDojiCheckHandan");
            tableMapping.ColumnMappings.Add("ShokenFollowFlg", "ShokenFollowFlg");
            tableMapping.ColumnMappings.Add("ShokenTaishoKensaBitMask", "ShokenTaishoKensaBitMask");
            tableMapping.ColumnMappings.Add("InsertDt", "InsertDt");
            tableMapping.ColumnMappings.Add("InsertUser", "InsertUser");
            tableMapping.ColumnMappings.Add("InsertTarm", "InsertTarm");
            tableMapping.ColumnMappings.Add("UpdateDt", "UpdateDt");
            tableMapping.ColumnMappings.Add("UpdateUser", "UpdateUser");
            tableMapping.ColumnMappings.Add("UpdateTarm", "UpdateTarm");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ShokenMst] WHERE (([ShokenKbn] = @Original_ShokenKbn) AND ([ShokenCd] = @Original_ShokenCd) AND ([ShokenJuyodo] = @Original_ShokenJuyodo) AND ([ShokenHyokiJun] = @Original_ShokenHyokiJun) AND ([ShokenHandan] = @Original_ShokenHandan) AND ([ShokenWd] = @Original_ShokenWd) AND ([ShokenWdRyaku] = @Original_ShokenWdRyaku) AND ([ShokenHantei] = @Original_ShokenHantei) AND ([ShokenBiko] = @Original_ShokenBiko) AND ([ShokenHokokuLevel] = @Original_ShokenHokokuLevel) AND ([ShokenShitekiKbn] = @Original_ShokenShitekiKbn) AND ([ShokenShitekiNo] = @Original_ShokenShitekiNo) AND ([ShokenDojiCheckKomoku] = @Original_ShokenDojiCheckKomoku) AND ([ShokenDojiCheckHandan] = @Original_ShokenDojiCheckHandan) AND ([ShokenFollowFlg] = @Original_ShokenFollowFlg) AND ([ShokenTaishoKensaBitMask] = @Original_ShokenTaishoKensaBitMask) AND ([InsertDt] = @Original_InsertDt) AND ([InsertUser] = @Original_InsertUser) AND ([InsertTarm] = @Original_InsertTarm) AND ([UpdateDt] = @Original_UpdateDt) AND ([UpdateUser] = @Original_UpdateUser) AND ([UpdateTarm] = @Original_UpdateTarm))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHyokiJun", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHyokiJun", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenDojiCheckHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckHandan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenTaishoKensaBitMask", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenTaishoKensaBitMask", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsertDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertDt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsertUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsertTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertTarm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateTarm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ShokenMst] ([ShokenKbn], [ShokenCd], [ShokenJuyodo], [ShokenHyokiJun], [ShokenHandan], [ShokenWd], [ShokenWdRyaku], [ShokenHantei], [ShokenBiko], [ShokenHokokuLevel], [ShokenShitekiKbn], [ShokenShitekiNo], [ShokenDojiCheckKomoku], [ShokenDojiCheckHandan], [ShokenFollowFlg], [ShokenTaishoKensaBitMask], [InsertDt], [InsertUser], [InsertTarm], [UpdateDt], [UpdateUser], [UpdateTarm]) VALUES (@ShokenKbn, @ShokenCd, @ShokenJuyodo, @ShokenHyokiJun, @ShokenHandan, @ShokenWd, @ShokenWdRyaku, @ShokenHantei, @ShokenBiko, @ShokenHokokuLevel, @ShokenShitekiKbn, @ShokenShitekiNo, @ShokenDojiCheckKomoku, @ShokenDojiCheckHandan, @ShokenFollowFlg, @ShokenTaishoKensaBitMask, @InsertDt, @InsertUser, @InsertTarm, @UpdateDt, @UpdateUser, @UpdateTarm);
SELECT ShokenKbn, ShokenCd, ShokenJuyodo, ShokenHyokiJun, ShokenHandan, ShokenWd, ShokenWdRyaku, ShokenHantei, ShokenBiko, ShokenHokokuLevel, ShokenShitekiKbn, ShokenShitekiNo, ShokenDojiCheckKomoku, ShokenDojiCheckHandan, ShokenFollowFlg, ShokenTaishoKensaBitMask, InsertDt, InsertUser, InsertTarm, UpdateDt, UpdateUser, UpdateTarm FROM ShokenMst WHERE (ShokenCd = @ShokenCd) AND (ShokenKbn = @ShokenKbn)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHyokiJun", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHyokiJun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenDojiCheckHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckHandan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenTaishoKensaBitMask", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenTaishoKensaBitMask", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsertDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertDt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsertUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsertTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertTarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateTarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [ShokenMst] SET [ShokenKbn] = @ShokenKbn, [ShokenCd] = @ShokenCd, [ShokenJ" +
                "uyodo] = @ShokenJuyodo, [ShokenHyokiJun] = @ShokenHyokiJun, [ShokenHandan] = @Sh" +
                "okenHandan, [ShokenWd] = @ShokenWd, [ShokenWdRyaku] = @ShokenWdRyaku, [ShokenHan" +
                "tei] = @ShokenHantei, [ShokenBiko] = @ShokenBiko, [ShokenHokokuLevel] = @ShokenH" +
                "okokuLevel, [ShokenShitekiKbn] = @ShokenShitekiKbn, [ShokenShitekiNo] = @ShokenS" +
                "hitekiNo, [ShokenDojiCheckKomoku] = @ShokenDojiCheckKomoku, [ShokenDojiCheckHand" +
                "an] = @ShokenDojiCheckHandan, [ShokenFollowFlg] = @ShokenFollowFlg, [ShokenTaish" +
                "oKensaBitMask] = @ShokenTaishoKensaBitMask, [InsertDt] = @InsertDt, [InsertUser]" +
                " = @InsertUser, [InsertTarm] = @InsertTarm, [UpdateDt] = @UpdateDt, [UpdateUser]" +
                " = @UpdateUser, [UpdateTarm] = @UpdateTarm WHERE (([ShokenKbn] = @Original_Shoke" +
                "nKbn) AND ([ShokenCd] = @Original_ShokenCd) AND ([ShokenJuyodo] = @Original_Shok" +
                "enJuyodo) AND ([ShokenHyokiJun] = @Original_ShokenHyokiJun) AND ([ShokenHandan] " +
                "= @Original_ShokenHandan) AND ([ShokenWd] = @Original_ShokenWd) AND ([ShokenWdRy" +
                "aku] = @Original_ShokenWdRyaku) AND ([ShokenHantei] = @Original_ShokenHantei) AN" +
                "D ([ShokenBiko] = @Original_ShokenBiko) AND ([ShokenHokokuLevel] = @Original_Sho" +
                "kenHokokuLevel) AND ([ShokenShitekiKbn] = @Original_ShokenShitekiKbn) AND ([Shok" +
                "enShitekiNo] = @Original_ShokenShitekiNo) AND ([ShokenDojiCheckKomoku] = @Origin" +
                "al_ShokenDojiCheckKomoku) AND ([ShokenDojiCheckHandan] = @Original_ShokenDojiChe" +
                "ckHandan) AND ([ShokenFollowFlg] = @Original_ShokenFollowFlg) AND ([ShokenTaisho" +
                "KensaBitMask] = @Original_ShokenTaishoKensaBitMask) AND ([InsertDt] = @Original_" +
                "InsertDt) AND ([InsertUser] = @Original_InsertUser) AND ([InsertTarm] = @Origina" +
                "l_InsertTarm) AND ([UpdateDt] = @Original_UpdateDt) AND ([UpdateUser] = @Origina" +
                "l_UpdateUser) AND ([UpdateTarm] = @Original_UpdateTarm));\r\nSELECT ShokenKbn, Sho" +
                "kenCd, ShokenJuyodo, ShokenHyokiJun, ShokenHandan, ShokenWd, ShokenWdRyaku, Shok" +
                "enHantei, ShokenBiko, ShokenHokokuLevel, ShokenShitekiKbn, ShokenShitekiNo, Shok" +
                "enDojiCheckKomoku, ShokenDojiCheckHandan, ShokenFollowFlg, ShokenTaishoKensaBitM" +
                "ask, InsertDt, InsertUser, InsertTarm, UpdateDt, UpdateUser, UpdateTarm FROM Sho" +
                "kenMst WHERE (ShokenCd = @ShokenCd) AND (ShokenKbn = @ShokenKbn)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHyokiJun", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHyokiJun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenDojiCheckHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckHandan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenTaishoKensaBitMask", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenTaishoKensaBitMask", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsertDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertDt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsertUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsertTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertTarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateTarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenCd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenJuyodo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenJuyodo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHyokiJun", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHyokiJun", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHandan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWd", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenWdRyaku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenWdRyaku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHantei", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHantei", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenBiko", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenBiko", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenHokokuLevel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenHokokuLevel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiKbn", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenShitekiNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenShitekiNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenDojiCheckKomoku", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckKomoku", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenDojiCheckHandan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenDojiCheckHandan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenFollowFlg", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenFollowFlg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenTaishoKensaBitMask", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenTaishoKensaBitMask", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsertDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertDt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsertUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsertTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsertTarm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDt", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateTarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateTarm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FukjBizSystem.Properties.Settings.Default.FukjBizSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT
  ShokenKbn
  , ShokenCd
  , ShokenJuyodo
  , ShokenHyokiJun
  , ShokenHandan
  , ShokenWd
  , ShokenWdRyaku
  , ShokenHantei
  , ShokenBiko
  , ShokenHokokuLevel
  , ShokenShitekiKbn
  , ShokenShitekiNo
  , ShokenDojiCheckKomoku
  , ShokenDojiCheckHandan
  , ShokenFollowFlg
  , ShokenTaishoKensaBitMask
  , InsertDt
  , InsertUser
  , InsertTarm
  , UpdateDt
  , UpdateUser
  , UpdateTarm 
FROM
  ShokenMst
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE \r\nFROM\r\n  [dbo].[ShokenMst] \r\nWHERE\r\n  ([ShokenKbn] = @Original_ShokenKbn)" +
                " \r\n  AND ([ShokenCd] = @Original_ShokenCd)\r\n";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenKbn", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShokenCd", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT
  ShokenKbn
  , ShokenCd
  , ShokenJuyodo
  , ShokenHyokiJun
  , ShokenHandan
  , ShokenWd
  , ShokenWdRyaku
  , ShokenHantei
  , ShokenBiko
  , ShokenHokokuLevel
  , ShokenShitekiKbn
  , ShokenShitekiNo
  , ShokenDojiCheckKomoku
  , ShokenDojiCheckHandan
  , ShokenFollowFlg
  , ShokenTaishoKensaBitMask
  , InsertDt
  , InsertUser
  , InsertTarm
  , UpdateDt
  , UpdateUser
  , UpdateTarm 
FROM
  ShokenMst
WHERE
  (ShokenKbn = @ShokenKbn) 
  AND (ShokenCd = @ShokenCd)
";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenKbn", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenKbn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShokenCd", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "ShokenCd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ShokenMstDataSet.ShokenMstDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ShokenMstDataSet.ShokenMstDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ShokenMstDataSet.ShokenMstDataTable dataTable = new ShokenMstDataSet.ShokenMstDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByKey(ShokenMstDataSet.ShokenMstDataTable dataTable, string ShokenKbn, string ShokenCd) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenKbn");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ShokenKbn));
            }
            if ((ShokenCd == null)) {
                throw new global::System.ArgumentNullException("ShokenCd");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ShokenCd));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ShokenMstDataSet.ShokenMstDataTable GetDataByKey(string ShokenKbn, string ShokenCd) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenKbn");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ShokenKbn));
            }
            if ((ShokenCd == null)) {
                throw new global::System.ArgumentNullException("ShokenCd");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ShokenCd));
            }
            ShokenMstDataSet.ShokenMstDataTable dataTable = new ShokenMstDataSet.ShokenMstDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ShokenMstDataSet.ShokenMstDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ShokenMstDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ShokenMst");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_ShokenKbn, 
                    string Original_ShokenCd, 
                    string Original_ShokenJuyodo, 
                    string Original_ShokenHyokiJun, 
                    string Original_ShokenHandan, 
                    string Original_ShokenWd, 
                    string Original_ShokenWdRyaku, 
                    string Original_ShokenHantei, 
                    string Original_ShokenBiko, 
                    string Original_ShokenHokokuLevel, 
                    string Original_ShokenShitekiKbn, 
                    string Original_ShokenShitekiNo, 
                    string Original_ShokenDojiCheckKomoku, 
                    string Original_ShokenDojiCheckHandan, 
                    string Original_ShokenFollowFlg, 
                    int Original_ShokenTaishoKensaBitMask, 
                    System.DateTime Original_InsertDt, 
                    string Original_InsertUser, 
                    string Original_InsertTarm, 
                    System.DateTime Original_UpdateDt, 
                    string Original_UpdateUser, 
                    string Original_UpdateTarm) {
            if ((Original_ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenKbn");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ShokenKbn));
            }
            if ((Original_ShokenCd == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenCd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ShokenCd));
            }
            if ((Original_ShokenJuyodo == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenJuyodo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ShokenJuyodo));
            }
            if ((Original_ShokenHyokiJun == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHyokiJun");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ShokenHyokiJun));
            }
            if ((Original_ShokenHandan == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHandan");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ShokenHandan));
            }
            if ((Original_ShokenWd == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenWd");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ShokenWd));
            }
            if ((Original_ShokenWdRyaku == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenWdRyaku");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ShokenWdRyaku));
            }
            if ((Original_ShokenHantei == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHantei");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ShokenHantei));
            }
            if ((Original_ShokenBiko == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenBiko");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ShokenBiko));
            }
            if ((Original_ShokenHokokuLevel == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHokokuLevel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ShokenHokokuLevel));
            }
            if ((Original_ShokenShitekiKbn == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenShitekiKbn");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ShokenShitekiKbn));
            }
            if ((Original_ShokenShitekiNo == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenShitekiNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ShokenShitekiNo));
            }
            if ((Original_ShokenDojiCheckKomoku == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenDojiCheckKomoku");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ShokenDojiCheckKomoku));
            }
            if ((Original_ShokenDojiCheckHandan == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenDojiCheckHandan");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_ShokenDojiCheckHandan));
            }
            if ((Original_ShokenFollowFlg == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenFollowFlg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ShokenFollowFlg));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_ShokenTaishoKensaBitMask));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((System.DateTime)(Original_InsertDt));
            if ((Original_InsertUser == null)) {
                throw new global::System.ArgumentNullException("Original_InsertUser");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_InsertUser));
            }
            if ((Original_InsertTarm == null)) {
                throw new global::System.ArgumentNullException("Original_InsertTarm");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_InsertTarm));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((System.DateTime)(Original_UpdateDt));
            if ((Original_UpdateUser == null)) {
                throw new global::System.ArgumentNullException("Original_UpdateUser");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_UpdateUser));
            }
            if ((Original_UpdateTarm == null)) {
                throw new global::System.ArgumentNullException("Original_UpdateTarm");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_UpdateTarm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string ShokenKbn, 
                    string ShokenCd, 
                    string ShokenJuyodo, 
                    string ShokenHyokiJun, 
                    string ShokenHandan, 
                    string ShokenWd, 
                    string ShokenWdRyaku, 
                    string ShokenHantei, 
                    string ShokenBiko, 
                    string ShokenHokokuLevel, 
                    string ShokenShitekiKbn, 
                    string ShokenShitekiNo, 
                    string ShokenDojiCheckKomoku, 
                    string ShokenDojiCheckHandan, 
                    string ShokenFollowFlg, 
                    int ShokenTaishoKensaBitMask, 
                    System.DateTime InsertDt, 
                    string InsertUser, 
                    string InsertTarm, 
                    System.DateTime UpdateDt, 
                    string UpdateUser, 
                    string UpdateTarm) {
            if ((ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenKbn");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ShokenKbn));
            }
            if ((ShokenCd == null)) {
                throw new global::System.ArgumentNullException("ShokenCd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ShokenCd));
            }
            if ((ShokenJuyodo == null)) {
                throw new global::System.ArgumentNullException("ShokenJuyodo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ShokenJuyodo));
            }
            if ((ShokenHyokiJun == null)) {
                throw new global::System.ArgumentNullException("ShokenHyokiJun");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ShokenHyokiJun));
            }
            if ((ShokenHandan == null)) {
                throw new global::System.ArgumentNullException("ShokenHandan");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ShokenHandan));
            }
            if ((ShokenWd == null)) {
                throw new global::System.ArgumentNullException("ShokenWd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ShokenWd));
            }
            if ((ShokenWdRyaku == null)) {
                throw new global::System.ArgumentNullException("ShokenWdRyaku");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ShokenWdRyaku));
            }
            if ((ShokenHantei == null)) {
                throw new global::System.ArgumentNullException("ShokenHantei");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ShokenHantei));
            }
            if ((ShokenBiko == null)) {
                throw new global::System.ArgumentNullException("ShokenBiko");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ShokenBiko));
            }
            if ((ShokenHokokuLevel == null)) {
                throw new global::System.ArgumentNullException("ShokenHokokuLevel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ShokenHokokuLevel));
            }
            if ((ShokenShitekiKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenShitekiKbn");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ShokenShitekiKbn));
            }
            if ((ShokenShitekiNo == null)) {
                throw new global::System.ArgumentNullException("ShokenShitekiNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ShokenShitekiNo));
            }
            if ((ShokenDojiCheckKomoku == null)) {
                throw new global::System.ArgumentNullException("ShokenDojiCheckKomoku");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ShokenDojiCheckKomoku));
            }
            if ((ShokenDojiCheckHandan == null)) {
                throw new global::System.ArgumentNullException("ShokenDojiCheckHandan");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(ShokenDojiCheckHandan));
            }
            if ((ShokenFollowFlg == null)) {
                throw new global::System.ArgumentNullException("ShokenFollowFlg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(ShokenFollowFlg));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((int)(ShokenTaishoKensaBitMask));
            this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(InsertDt));
            if ((InsertUser == null)) {
                throw new global::System.ArgumentNullException("InsertUser");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(InsertUser));
            }
            if ((InsertTarm == null)) {
                throw new global::System.ArgumentNullException("InsertTarm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(InsertTarm));
            }
            this.Adapter.InsertCommand.Parameters[19].Value = ((System.DateTime)(UpdateDt));
            if ((UpdateUser == null)) {
                throw new global::System.ArgumentNullException("UpdateUser");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(UpdateUser));
            }
            if ((UpdateTarm == null)) {
                throw new global::System.ArgumentNullException("UpdateTarm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(UpdateTarm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ShokenKbn, 
                    string ShokenCd, 
                    string ShokenJuyodo, 
                    string ShokenHyokiJun, 
                    string ShokenHandan, 
                    string ShokenWd, 
                    string ShokenWdRyaku, 
                    string ShokenHantei, 
                    string ShokenBiko, 
                    string ShokenHokokuLevel, 
                    string ShokenShitekiKbn, 
                    string ShokenShitekiNo, 
                    string ShokenDojiCheckKomoku, 
                    string ShokenDojiCheckHandan, 
                    string ShokenFollowFlg, 
                    int ShokenTaishoKensaBitMask, 
                    System.DateTime InsertDt, 
                    string InsertUser, 
                    string InsertTarm, 
                    System.DateTime UpdateDt, 
                    string UpdateUser, 
                    string UpdateTarm, 
                    string Original_ShokenKbn, 
                    string Original_ShokenCd, 
                    string Original_ShokenJuyodo, 
                    string Original_ShokenHyokiJun, 
                    string Original_ShokenHandan, 
                    string Original_ShokenWd, 
                    string Original_ShokenWdRyaku, 
                    string Original_ShokenHantei, 
                    string Original_ShokenBiko, 
                    string Original_ShokenHokokuLevel, 
                    string Original_ShokenShitekiKbn, 
                    string Original_ShokenShitekiNo, 
                    string Original_ShokenDojiCheckKomoku, 
                    string Original_ShokenDojiCheckHandan, 
                    string Original_ShokenFollowFlg, 
                    int Original_ShokenTaishoKensaBitMask, 
                    System.DateTime Original_InsertDt, 
                    string Original_InsertUser, 
                    string Original_InsertTarm, 
                    System.DateTime Original_UpdateDt, 
                    string Original_UpdateUser, 
                    string Original_UpdateTarm) {
            if ((ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenKbn");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ShokenKbn));
            }
            if ((ShokenCd == null)) {
                throw new global::System.ArgumentNullException("ShokenCd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ShokenCd));
            }
            if ((ShokenJuyodo == null)) {
                throw new global::System.ArgumentNullException("ShokenJuyodo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ShokenJuyodo));
            }
            if ((ShokenHyokiJun == null)) {
                throw new global::System.ArgumentNullException("ShokenHyokiJun");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ShokenHyokiJun));
            }
            if ((ShokenHandan == null)) {
                throw new global::System.ArgumentNullException("ShokenHandan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ShokenHandan));
            }
            if ((ShokenWd == null)) {
                throw new global::System.ArgumentNullException("ShokenWd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ShokenWd));
            }
            if ((ShokenWdRyaku == null)) {
                throw new global::System.ArgumentNullException("ShokenWdRyaku");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ShokenWdRyaku));
            }
            if ((ShokenHantei == null)) {
                throw new global::System.ArgumentNullException("ShokenHantei");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ShokenHantei));
            }
            if ((ShokenBiko == null)) {
                throw new global::System.ArgumentNullException("ShokenBiko");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ShokenBiko));
            }
            if ((ShokenHokokuLevel == null)) {
                throw new global::System.ArgumentNullException("ShokenHokokuLevel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ShokenHokokuLevel));
            }
            if ((ShokenShitekiKbn == null)) {
                throw new global::System.ArgumentNullException("ShokenShitekiKbn");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ShokenShitekiKbn));
            }
            if ((ShokenShitekiNo == null)) {
                throw new global::System.ArgumentNullException("ShokenShitekiNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ShokenShitekiNo));
            }
            if ((ShokenDojiCheckKomoku == null)) {
                throw new global::System.ArgumentNullException("ShokenDojiCheckKomoku");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ShokenDojiCheckKomoku));
            }
            if ((ShokenDojiCheckHandan == null)) {
                throw new global::System.ArgumentNullException("ShokenDojiCheckHandan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(ShokenDojiCheckHandan));
            }
            if ((ShokenFollowFlg == null)) {
                throw new global::System.ArgumentNullException("ShokenFollowFlg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(ShokenFollowFlg));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ShokenTaishoKensaBitMask));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(InsertDt));
            if ((InsertUser == null)) {
                throw new global::System.ArgumentNullException("InsertUser");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(InsertUser));
            }
            if ((InsertTarm == null)) {
                throw new global::System.ArgumentNullException("InsertTarm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(InsertTarm));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(UpdateDt));
            if ((UpdateUser == null)) {
                throw new global::System.ArgumentNullException("UpdateUser");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(UpdateUser));
            }
            if ((UpdateTarm == null)) {
                throw new global::System.ArgumentNullException("UpdateTarm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(UpdateTarm));
            }
            if ((Original_ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenKbn");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_ShokenKbn));
            }
            if ((Original_ShokenCd == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenCd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_ShokenCd));
            }
            if ((Original_ShokenJuyodo == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenJuyodo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ShokenJuyodo));
            }
            if ((Original_ShokenHyokiJun == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHyokiJun");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_ShokenHyokiJun));
            }
            if ((Original_ShokenHandan == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHandan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_ShokenHandan));
            }
            if ((Original_ShokenWd == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenWd");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_ShokenWd));
            }
            if ((Original_ShokenWdRyaku == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenWdRyaku");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_ShokenWdRyaku));
            }
            if ((Original_ShokenHantei == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHantei");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_ShokenHantei));
            }
            if ((Original_ShokenBiko == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenBiko");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ShokenBiko));
            }
            if ((Original_ShokenHokokuLevel == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenHokokuLevel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_ShokenHokokuLevel));
            }
            if ((Original_ShokenShitekiKbn == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenShitekiKbn");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_ShokenShitekiKbn));
            }
            if ((Original_ShokenShitekiNo == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenShitekiNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_ShokenShitekiNo));
            }
            if ((Original_ShokenDojiCheckKomoku == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenDojiCheckKomoku");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_ShokenDojiCheckKomoku));
            }
            if ((Original_ShokenDojiCheckHandan == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenDojiCheckHandan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_ShokenDojiCheckHandan));
            }
            if ((Original_ShokenFollowFlg == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenFollowFlg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_ShokenFollowFlg));
            }
            this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_ShokenTaishoKensaBitMask));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((System.DateTime)(Original_InsertDt));
            if ((Original_InsertUser == null)) {
                throw new global::System.ArgumentNullException("Original_InsertUser");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_InsertUser));
            }
            if ((Original_InsertTarm == null)) {
                throw new global::System.ArgumentNullException("Original_InsertTarm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_InsertTarm));
            }
            this.Adapter.UpdateCommand.Parameters[41].Value = ((System.DateTime)(Original_UpdateDt));
            if ((Original_UpdateUser == null)) {
                throw new global::System.ArgumentNullException("Original_UpdateUser");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_UpdateUser));
            }
            if ((Original_UpdateTarm == null)) {
                throw new global::System.ArgumentNullException("Original_UpdateTarm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_UpdateTarm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ShokenJuyodo, 
                    string ShokenHyokiJun, 
                    string ShokenHandan, 
                    string ShokenWd, 
                    string ShokenWdRyaku, 
                    string ShokenHantei, 
                    string ShokenBiko, 
                    string ShokenHokokuLevel, 
                    string ShokenShitekiKbn, 
                    string ShokenShitekiNo, 
                    string ShokenDojiCheckKomoku, 
                    string ShokenDojiCheckHandan, 
                    string ShokenFollowFlg, 
                    int ShokenTaishoKensaBitMask, 
                    System.DateTime InsertDt, 
                    string InsertUser, 
                    string InsertTarm, 
                    System.DateTime UpdateDt, 
                    string UpdateUser, 
                    string UpdateTarm, 
                    string Original_ShokenKbn, 
                    string Original_ShokenCd, 
                    string Original_ShokenJuyodo, 
                    string Original_ShokenHyokiJun, 
                    string Original_ShokenHandan, 
                    string Original_ShokenWd, 
                    string Original_ShokenWdRyaku, 
                    string Original_ShokenHantei, 
                    string Original_ShokenBiko, 
                    string Original_ShokenHokokuLevel, 
                    string Original_ShokenShitekiKbn, 
                    string Original_ShokenShitekiNo, 
                    string Original_ShokenDojiCheckKomoku, 
                    string Original_ShokenDojiCheckHandan, 
                    string Original_ShokenFollowFlg, 
                    int Original_ShokenTaishoKensaBitMask, 
                    System.DateTime Original_InsertDt, 
                    string Original_InsertUser, 
                    string Original_InsertTarm, 
                    System.DateTime Original_UpdateDt, 
                    string Original_UpdateUser, 
                    string Original_UpdateTarm) {
            return this.Update(Original_ShokenKbn, Original_ShokenCd, ShokenJuyodo, ShokenHyokiJun, ShokenHandan, ShokenWd, ShokenWdRyaku, ShokenHantei, ShokenBiko, ShokenHokokuLevel, ShokenShitekiKbn, ShokenShitekiNo, ShokenDojiCheckKomoku, ShokenDojiCheckHandan, ShokenFollowFlg, ShokenTaishoKensaBitMask, InsertDt, InsertUser, InsertTarm, UpdateDt, UpdateUser, UpdateTarm, Original_ShokenKbn, Original_ShokenCd, Original_ShokenJuyodo, Original_ShokenHyokiJun, Original_ShokenHandan, Original_ShokenWd, Original_ShokenWdRyaku, Original_ShokenHantei, Original_ShokenBiko, Original_ShokenHokokuLevel, Original_ShokenShitekiKbn, Original_ShokenShitekiNo, Original_ShokenDojiCheckKomoku, Original_ShokenDojiCheckHandan, Original_ShokenFollowFlg, Original_ShokenTaishoKensaBitMask, Original_InsertDt, Original_InsertUser, Original_InsertTarm, Original_UpdateDt, Original_UpdateUser, Original_UpdateTarm);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteByKey(string Original_ShokenKbn, string Original_ShokenCd) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Original_ShokenKbn == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenKbn");
            }
            else {
                command.Parameters[0].Value = ((string)(Original_ShokenKbn));
            }
            if ((Original_ShokenCd == null)) {
                throw new global::System.ArgumentNullException("Original_ShokenCd");
            }
            else {
                command.Parameters[1].Value = ((string)(Original_ShokenCd));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ShokenMstKensakuTableAdapter _shokenMstKensakuTableAdapter;
        
        private ShokenMstTableAdapter _shokenMstTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ShokenMstKensakuTableAdapter ShokenMstKensakuTableAdapter {
            get {
                return this._shokenMstKensakuTableAdapter;
            }
            set {
                this._shokenMstKensakuTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ShokenMstTableAdapter ShokenMstTableAdapter {
            get {
                return this._shokenMstTableAdapter;
            }
            set {
                this._shokenMstTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._shokenMstKensakuTableAdapter != null) 
                            && (this._shokenMstKensakuTableAdapter.Connection != null))) {
                    return this._shokenMstKensakuTableAdapter.Connection;
                }
                if (((this._shokenMstTableAdapter != null) 
                            && (this._shokenMstTableAdapter.Connection != null))) {
                    return this._shokenMstTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._shokenMstKensakuTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._shokenMstTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(ShokenMstDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._shokenMstTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ShokenMst.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._shokenMstTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._shokenMstKensakuTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ShokenMstKensaku.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._shokenMstKensakuTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(ShokenMstDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._shokenMstTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ShokenMst.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._shokenMstTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._shokenMstKensakuTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ShokenMstKensaku.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._shokenMstKensakuTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(ShokenMstDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._shokenMstKensakuTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ShokenMstKensaku.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._shokenMstKensakuTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._shokenMstTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ShokenMst.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._shokenMstTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(ShokenMstDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._shokenMstKensakuTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._shokenMstKensakuTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._shokenMstTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._shokenMstTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な" +
                        " TableAdapter インスタンスに設定してください。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._shokenMstKensakuTableAdapter != null)) {
                    revertConnections.Add(this._shokenMstKensakuTableAdapter, this._shokenMstKensakuTableAdapter.Connection);
                    this._shokenMstKensakuTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._shokenMstKensakuTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._shokenMstKensakuTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._shokenMstKensakuTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._shokenMstKensakuTableAdapter.Adapter);
                    }
                }
                if ((this._shokenMstTableAdapter != null)) {
                    revertConnections.Add(this._shokenMstTableAdapter, this._shokenMstTableAdapter.Connection);
                    this._shokenMstTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._shokenMstTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._shokenMstTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._shokenMstTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._shokenMstTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._shokenMstKensakuTableAdapter != null)) {
                    this._shokenMstKensakuTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._shokenMstKensakuTableAdapter]));
                    this._shokenMstKensakuTableAdapter.Transaction = null;
                }
                if ((this._shokenMstTableAdapter != null)) {
                    this._shokenMstTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._shokenMstTableAdapter]));
                    this._shokenMstTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591